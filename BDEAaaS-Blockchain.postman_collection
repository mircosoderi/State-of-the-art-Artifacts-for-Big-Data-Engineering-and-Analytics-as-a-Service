{
	"info": {
		"_postman_id": "ee101547-bcfd-40e0-ad69-e1ec8efd0983",
		"name": "BDEAaaS Blockchain",
		"description": "In this collection, we create a set of nodes that work as clients for accessing the list of the pending transactions that are submitted to a blockchain in real time, as well as for submitting new transactions.\n\nThe Ethereum (Holesky) blockchain provided by Google Cloud as a part of the Blockchain RPC service is used for this demonstration.\n\nThe purpose of the collection is to provide a working example that demonstrates how it is possible to integrate Blockchain functionalities into the pre-existing framework for Big Data Engineering and Analytics as a Service.\n\nTo learn more about the framework, please visit:\n\n[https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16531967"
	},
	"item": [
		{
			"name": "Build",
			"item": [
				{
					"name": "Instantiate Network Factory",
					"item": [
						{
							"name": "0.1) Pull Network Factory Image",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{DockerHost}}:2375/images/create?fromImage=msoderi/network-factory&tag=0.15",
									"host": [
										"{{DockerHost}}"
									],
									"port": "2375",
									"path": [
										"images",
										"create"
									],
									"query": [
										{
											"key": "fromImage",
											"value": "msoderi/network-factory"
										},
										{
											"key": "tag",
											"value": "0.15"
										}
									]
								},
								"description": "Thanks to this request, the msoderi/network-factory Docker Image becomes available in your local Docker installation, or in the specified DockerHost, if different from the default (localhost). The image is retrieved from Docker Hub.\n\nThe execution time can be longer or shorter depending on whether or not the image of interest is already available on the Docker Host as a result of a past download."
							},
							"response": [
								{
									"name": "0.1) Pull Network Factory Image",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{DockerHost}}:2375/images/create?fromImage=msoderi/network-factory&tag=0.15",
											"host": [
												"{{DockerHost}}"
											],
											"port": "2375",
											"path": [
												"images",
												"create"
											],
											"query": [
												{
													"key": "fromImage",
													"value": "msoderi/network-factory"
												},
												{
													"key": "tag",
													"value": "0.15"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Api-Version",
											"value": "1.47"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:04:31 GMT"
										},
										{
											"key": "Docker-Experimental",
											"value": "false"
										},
										{
											"key": "Ostype",
											"value": "linux"
										},
										{
											"key": "Server",
											"value": "Docker/27.4.0 (linux)"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\"status\":\"Pulling from msoderi/network-factory\",\"id\":\"0.15\"}\r\n{\"status\":\"Digest: sha256:17fe681dee3d37f8582fef96ddcdd63b9b6b2cdd1e5aabb23e0d85aacb0d8681\"}\r\n{\"status\":\"Status: Image is up to date for msoderi/network-factory:0.15\"}\r\n"
								}
							]
						},
						{
							"name": "0.2) Create Network Factory",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n     \"Image\": \"msoderi/network-factory:0.15\",\r\n     \"HostConfig\": {\r\n         \"PortBindings\": {\r\n             \"1880/tcp\": [\r\n                 {\r\n                     \"HostPort\": \"585\"\r\n                 }\r\n             ]\r\n         }\r\n     },\r\n     \"ExposedPorts\": {\r\n         \"1880/tcp\": {}\r\n     }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DockerHost}}:2375/containers/create?name=BDEAaaS-Factory",
									"host": [
										"{{DockerHost}}"
									],
									"port": "2375",
									"path": [
										"containers",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "BDEAaaS-Factory"
										}
									]
								},
								"description": "Through this request, you create a Docker container from the msoderi/network-factory Docker Image. The container is created on DockerHost, which is your localhost, unless otherwise specified."
							},
							"response": [
								{
									"name": "0.2) Create Network Factory",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n     \"Image\": \"msoderi/network-factory:0.15\",\r\n     \"HostConfig\": {\r\n         \"PortBindings\": {\r\n             \"1880/tcp\": [\r\n                 {\r\n                     \"HostPort\": \"585\"\r\n                 }\r\n             ]\r\n         }\r\n     },\r\n     \"ExposedPorts\": {\r\n         \"1880/tcp\": {}\r\n     }\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DockerHost}}:2375/containers/create?name=BDEAaaS-Factory",
											"host": [
												"{{DockerHost}}"
											],
											"port": "2375",
											"path": [
												"containers",
												"create"
											],
											"query": [
												{
													"key": "name",
													"value": "BDEAaaS-Factory"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Api-Version",
											"value": "1.47"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:07:30 GMT"
										},
										{
											"key": "Docker-Experimental",
											"value": "false"
										},
										{
											"key": "Ostype",
											"value": "linux"
										},
										{
											"key": "Server",
											"value": "Docker/27.4.0 (linux)"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"Id\": \"29ffa24790437e9977b631f8dc4440ae03e1f706d8304e36f671007a2229588e\",\n    \"Warnings\": []\n}"
								}
							]
						},
						{
							"name": "0.3) Start Network Factory",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{DockerHost}}:2375/containers/BDEAaaS-Factory/start",
									"host": [
										"{{DockerHost}}"
									],
									"port": "2375",
									"path": [
										"containers",
										"BDEAaaS-Factory",
										"start"
									]
								},
								"description": "Through this request, you start the Docker container you created through request 0.2, and have a Network Factory up and running in your target device, which is by default your local device."
							},
							"response": [
								{
									"name": "0.3) Start Network Factory",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{DockerHost}}:2375/containers/BDEAaaS-Factory/start",
											"host": [
												"{{DockerHost}}"
											],
											"port": "2375",
											"path": [
												"containers",
												"BDEAaaS-Factory",
												"start"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Api-Version",
											"value": "1.47"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:08:52 GMT"
										},
										{
											"key": "Docker-Experimental",
											"value": "false"
										},
										{
											"key": "Ostype",
											"value": "linux"
										},
										{
											"key": "Server",
											"value": "Docker/27.4.0 (linux)"
										}
									],
									"cookie": [],
									"body": null
								}
							]
						}
					],
					"description": "Please find below here some generic information about the Network Factory.\n\nThe requests in this folder are for pulling the msoderi/network-factory image from Docker Hub, and then creating and running a container from it. The Network Factory is a Node-RED application. Having a running container of the Network Factory in a device means having the possibility of installing, configuring, and operating arbitrary software on that device from remote, including some notable software components that we will get to know along our way through this getting started collection, such as Service Nodes, Crazy Nodes, Library Nodes, AI Server Nodes, Context Brokers, ACL Nodes, in a secure and reliable manner.\n\n**Customizing the Network Factory**\n\nIf you wish to inspect the implementation and customize the Network Factory, instead of just using the provided Docker Image, do the following:\n\n- Run a Node-RED Docker Container with an associated [Docker Volume](https://docs.docker.com/storage/volumes/) mapped on the path /data\n    \n- [Restore](https://docs.docker.com/storage/volumes/#restore-volume-from-a-backup) the [Network Factory Docker Volume Backup](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/networkfactory.tar) to the Docker Volume associated to your newly created Docker Container\n    \n- Restart your Node-RED container, and connect to its Web interface\n    \n\nYou are now free to inspect the Network Factory default implementation.\n\nFeel free to make all necessary modifications, then [backup](https://docs.docker.com/storage/volumes/#back-up-a-volume) the Docker Volume for future usage."
				},
				{
					"name": "Create and Organize Nodes",
					"item": [
						{
							"name": "1) Create Fence",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/fence/:name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"fence",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Blockchain"
										}
									]
								},
								"description": "This request creates a fence (user-defined Docker network) named GettingStarted on the targeted Docker Host."
							},
							"response": [
								{
									"name": "1) Create Fence",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/fence/:name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"fence",
												":name"
											],
											"variable": [
												{
													"key": "name",
													"value": "Blockchain"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "87"
										},
										{
											"key": "ETag",
											"value": "W/\"57-sl8TYy42YeyB469SDSKCU/voBII\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:15:35 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"Id\": \"1a13d70c832174e221db5228ae1b85937447ea0cfabc3ea261d77fb76a728138\",\n    \"Warning\": \"\"\n}"
								}
							]
						},
						{
							"name": "2) Create Service Node ACL",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/servicenodeacl",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"servicenodeacl"
									]
								},
								"description": "This request creates a placeholder implentation of the access control logic which is relied on by all Service Nodes that will be created for the purposes of this getting started examples. The ACL API is created in the GettingStarted fence (so it is connected to the GettingStarted user-defined Docker network)."
							},
							"response": [
								{
									"name": "2) Create Service Node ACL",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DockerHost}}:585/Blockchain/servicenodeacl",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Blockchain",
												"servicenodeacl"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "424"
										},
										{
											"key": "ETag",
											"value": "W/\"1a8-2mQr9I0Uvfs8U84IevtVaoE7Cfc\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:17:08 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Blockchain\",\n    \"name\": \"ServiceNodeDefaultACL\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenodeacl.tar\",\n    \"ports\": {},\n    \"env\": [],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "3) Create Transformation Library",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/transformationlibrary",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"transformationlibrary"
									]
								},
								"description": "This request creates a default Transformation Library, which is used by all Service Nodes that will be created for the purposes of these getting started examples. The library is created in the GettingStarted fence (so it is connected to the GettingStarted user-defined Docker network).\n\nAs the number of reusable modules in the library grows, the time required for downloading the archive from GitHub also grows, which may cause Postman to return a socket hang up error after some time. Please ignore that error, and monitor the containers on the Docker Host. When you can see the DefaultTransformationLibrary container up and running, you are ready to proceed with the following requests. You may want to create your own Transformation Library that only contains the reusable modules of your interest; that would reduce the size of the archive and prevent these problems from happening."
							},
							"response": []
						},
						{
							"name": "4) Create MQTT Broker ACL",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/brokeracl",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"brokeracl"
									]
								},
								"description": "This requests create a placeholder implementation the access control logic which is relied on by the EMQX MQTT broker instance that will be created for the purposes of this getting started examples. The ACL API is created in the GettingStarted fence."
							},
							"response": [
								{
									"name": "4) Create MQTT Broker ACL",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Blockchain/brokeracl",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Blockchain",
												"brokeracl"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "418"
										},
										{
											"key": "ETag",
											"value": "W/\"1a2-9yEXQoDbgJDKc0zfIJ8yEoCoH28\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:50:28 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Blockchain\",\n    \"name\": \"MqttBrokerDefaultACL\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/brokeracl.tar\",\n    \"ports\": {},\n    \"env\": [],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "5) Create MQTT Broker",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"broker"
									]
								},
								"description": "Through this request, an instance of the EMQX MQTT broker is created in the GettingStarted fence. The broker is used for data exchange among the Service Nodes that are used for these getting started examples.\n\nThe request may take longer or shorter to execute depending on whether the image of interest needs to be downloaded from Docker Hub, or it is already available in the Docker Host because of some past request.\n\nSometimes, if the image needs to be downloaded and the connection speed is not high enough, Postman may return a socket hang up error. Please ignore that error, and monitor the Docker containers. When you have a DefaultMqttBroker container up and running, you are ready to proceed with the following requests."
							},
							"response": []
						},
						{
							"name": "6) Create Holeskyskt Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"HoleskysktSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1884\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"servicenode"
									]
								},
								"description": "In this request the Holeskyskt Service Node is created in the Blockchain fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1884, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1884. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "6) Create Holeskyskt Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"HoleskysktSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1884\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Blockchain/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Blockchain",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "748"
										},
										{
											"key": "ETag",
											"value": "W/\"2ec-EjE58k0wn3fRwYTmfJyHe2ZNq/Q\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:58:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Blockchain\",\n    \"name\": \"HoleskysktSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1884\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "7) Create Holeskytbl Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"HoleskytblSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1885\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"servicenode"
									]
								},
								"description": "In this request the Holeskytbl Service Node is created in the Blockchain fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1885, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1885. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "7) Create Holeskytbl Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"HoleskytblSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1885\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Blockchain/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Blockchain",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "748"
										},
										{
											"key": "ETag",
											"value": "W/\"2ec-USFdQt9zMQk2zslyOX3KQbR/Ctw\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:59:18 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Blockchain\",\n    \"name\": \"HoleskytblSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1885\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "8) Create Holeskywrt Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"HoleskywrtSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1886\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"servicenode"
									]
								},
								"description": "In this request the Holeskywrt Service Node is created in the Blockchain fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1886, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1886. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "8) Create Holeskywrt Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"HoleskywrtSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1886\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Blockchain/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Blockchain",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "748"
										},
										{
											"key": "ETag",
											"value": "W/\"2ec-XoFxy8FOEcIyB1pF3AEjKrvtrSs\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 11:59:32 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Blockchain\",\n    \"name\": \"HoleskywrtSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1886\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						}
					],
					"description": "Please find below here some generic yet relevant information about the different types of nodes and containerised software components that are created in this folder, or that are not actually created but might be of interest for other applications.\n\nThe requests in this folder are for creating the software components that we need for our first getting started example. All software components are deployed in Docker containers, so creating software components correspond to creating and running Docker containers that differentiate for the software artifacts that are preloaded into them at creation time. For each Docker container that is created, a Docker Volume is also created and mapped to an appropriate path in the Docker container. Once created, these software components will have to be configured, which is what will be done in the following folders of this getting started collection.\n\nA **Fence** is a logical boundary inside of which software components are created and executed. Technically speaking, fences are user-defined Docker networks. Software components that are in a fence cannot be accessed from the external, unless specifically configured. Software components that are in the same fence refer each other by container name. Software components that are in a fence do not have direct access to system resources. Fences are used for providing a logical organization to software deployed on a device, and for security reasons.\n\nA **Service Node** is a dockerized Node-RED application. As soon as created, the Service Node exposes a set of configuration APIs, by means of which it is possible to configure the task that the node must perform, as well as the task-specific configuration parameters, the possible MQTT clients for input/output, and more. Service Nodes are created through appropriate requests made to the Network Factory. Parameters can be set to retrieve customized Service Node implementations from the Web or from the local network, instead of using the default implementation.\n\nA **Crazy Node**, not used in this getting started collection, is a specialized Service Node that exposes APIs for operating arbitrary modifications on the implementation of the task that is executed by the node, at the maximum possible level of detail. It is the same as if a Java application would expose APIs for modifying any line of code in the source code of the Java application itself, in any possible way, with immediate effect. Uniquely, Node-RED supports this, and in Crazy Nodes, this feature is exploited.\n\nFor any request sent to a configuration API of a Service or a Crazy Node, there's an access control API that is called for verifying whether the request is authorized to alter that specific configuration. The URL of the ACL API is configured when the node is created, as an environment variable. Placeholder **Service Node ACL** APIs can be created for development and early testing purposes, through appropriate requests made to the Network Factory. This is what we do in this getting started collection. By setting appropriate parameters, it would be also possible to preload a customized Node-RED implementation of the access control logic, retireved from an archive available on the Web on in the local network.\n\nService and Crazy Nodes expose a dedicated configuration API that is used for specifying the task that the node must perform. The task is just identified by name. The API accesses the **Transformation Library**, retrieves the task implementation, and copies it, along with all dependencies, into the Service or Crazy Node. A Transformation Library is a dockerized Node-RED application which consists of a set of Node-RED subflows, each implementing a different task. Transformation Libraries are created through appropriate requests made to the Network Factory. By setting appropriate parameters, it is possible to create customized libraries. Otherwise, the default library, with a set of pre-implemented tasks, is created.\n\nService and Crazy Nodes exchange data each other by means of **MQTT brokers**. This makes the software solution maximally inspectable. Any MQTT broker can be used. If needed, instances of dockerized EMQX MQTT brokers and their associated **MQTT Broker ACL** APIs can be created through appropriate requests made to the Network Factory. This is what we do in this getting started collection.\n\n**How to develop and use customized nodes**\n\nIn the [GitHub repository](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service), source code archives are available for:\n\n- [Service Node](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/servicenode.tar)\n    \n- [Crazy Node](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/crazynode.tar)\n    \n- [Transformation Library](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/transformationlibrary.tar)\n    \n- [Service Node ACL](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/servicenodeacl.tar)\n    \n- [Broker ACL](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/brokeracl.tar)\n    \n- other\n    \n\nAll of them are Node-RED applications, which means that you can inspect their implementation by doing the following:\n\n- Run a Node-RED Docker Container with an associated [Docker Volume](https://docs.docker.com/storage/volumes/) mapped on the path /data\n    \n- [Restore](https://docs.docker.com/storage/volumes/#restore-volume-from-a-backup) the archive of interest to the Docker Volume associated to your newly created Docker Container\n    \n- Restart your Node-RED container, and connect to its Web interface.\n    \n\nYou are now free to inspect the default implementation of the application of your interest.\n\nFeel free to make all necessary modifications, then [backup](https://docs.docker.com/storage/volumes/#back-up-a-volume) the Docker Volume, and publish the resulting tar archive on the Internet or in your local network in a position that is reachable from the devices where you have a plan to use your customized implementation.\n\nAt this point, when you make requests to the Network Factory to create Service Nodes, Crazy Nodes, Transformation Libraries, any of the applications that we have mentioned above, just include a JSON body in your request, with the key **artifacts**, whose associated value must be a string, which is the URL where your customized implementation is published.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "netadmpass",
								"type": "string"
							},
							{
								"key": "username",
								"value": "netadm",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure HoleskysktSN",
					"item": [
						{
							"name": "9) PUT transformation: holeskyskt",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "holeskyskt"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the holeskyskt Node-RED subflow from the configured Transformation Library to the HoleskysktSN Service Node. The request is made to the Service Node itself."
							},
							"response": [
								{
									"name": "9) PUT transformation: holeskyskt",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "holeskyskt"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "10"
										},
										{
											"key": "ETag",
											"value": "W/\"a-uB02NArO4RvNjQxyeh0blHLu5Kw\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:24:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "holeskyskt"
								}
							]
						},
						{
							"name": "10) POST config socket_url",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "wss://blockchain.googleapis.com/v1/projects/***/locations/us-central1/endpoints/ethereum-holesky/rpc?key=***"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/config/socket_url",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"config",
										"socket_url"
									]
								},
								"description": "Through this request, we use a configuration API that is exposed by the holeskyskt Node-RED subflow that we have just uploaded to the HoleskysktSN Service Node, to configure the websocket URL to be used for sending subscribe and unsubscribe requests to the blockchain.\n\nThe one included in the request is not a good URL. You can subscribe to the Blockchain RPC service of Google Cloud to obtain a valid URL, or to any other service provider of your choice."
							},
							"response": [
								{
									"name": "10) POST config socket_url",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "wss://blockchain.googleapis.com/v1/projects/***/locations/us-central1/endpoints/ethereum-holesky/rpc?key=***"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/config/socket_url",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"config",
												"socket_url"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "108"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"6c-9hsahf0M19eGo9TTqsUpTPKvIEc\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:26:17 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "wss://blockchain.googleapis.com/v1/projects/***/locations/us-central1/endpoints/ethereum-holesky/rpc?key=***"
								}
							]
						},
						{
							"name": "11) POST output node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/output",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"output"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through requests from # 12 to # 22. This way the output generated by the execution of the task loaded into this Service Node is published to the configured topic of the configured MQTT broker instance, and made available to other Service Nodes, which will listen to that same topic, and get input values from there, and publish their outputs to different configured topic(s) in the same or in other MQTT broker instances.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more output ports through which the generated outputs flow. These ports are not automatically connected to the MQTT client node that we are creating and configuring in requests from # 12 to # 22. For this reason, it is necessary to explicitly wire the output of the business logic, to the input of the MQTT client node, which is what is done through request # 23."
							},
							"response": [
								{
									"name": "11) POST output node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/output",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"output"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:36:14 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "12) PUT output broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "12) PUT output broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:37:10 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "13) PUT output port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "13) PUT output port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:38:45 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "14) PUT output topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "blockchain/pendingtransactions"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"topic"
									]
								},
								"description": "This request configures the topic to which the output of the Service Node will be published, in the previously configured MQTT broker."
							},
							"response": [
								{
									"name": "14) PUT output topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "blockchain/pendingtransactions"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "30"
										},
										{
											"key": "ETag",
											"value": "W/\"1e-62GiiEYbjHDplaT8K+UWn3VY3xU\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:39:57 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "blockchain/pendingtransactions"
								}
							]
						},
						{
							"name": "15) PUT output qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "15) PUT output qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:40:22 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "16) PUT output usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "16) PUT output usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:42:20 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "17) PUT output tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "17) PUT output tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:42:35 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "18) PUT output tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "18) PUT output tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:43:06 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "19) PUT output tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "19) PUT output tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:43:19 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "20) PUT output tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "20) PUT output tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:44:08 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "21) PUT output tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "21) PUT output tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:45:08 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "22) PUT output credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "22) PUT output credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:45:42 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "23) POST wire dbtail - out",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/wire/holeskyskt/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"wire",
										"holeskyskt",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "23) POST wire dbtail - out",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/wire/holeskyskt/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"wire",
												"holeskyskt",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:46:35 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "24) Start HoleskysktSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the holeskyskt Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "24) Start HoleskysktSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:46:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the HoleskysktSN Service Node is configured. The purpose of this Service Node is to establish a socket connection to the blockchain and get the newly submitted pending transactions in real-time. As a part of this configuration, the Service Node publishes such transactions to the blockchain/pendingtransactions topic of the MQTT broker created above in this collection.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure HoleskytblSN",
					"item": [
						{
							"name": "25) POST module node-red-dashboard",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/module/node-red-dashboard",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"module",
										"node-red-dashboard"
									]
								},
								"description": "Through this request, we add to the HoleskytblSN Service Node a specific Node-RED module that is necessary for the Service Node to be capable to expose data on a Web page. The task implementation that we will load into this Service Node in request # 27, relies on this module.\n\nRemarkably, this request is not made to the Network Factory; instead, it is made directly to the Service Node where the Node-RED module is required. The same happens for all requests contained in this folder, thanks to the fact that since creation time, Service Nodes expose a number of APIs that can be called for their configuration, without passing through the Network Factory."
							},
							"response": [
								{
									"name": "25) POST module node-red-dashboard",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/module/node-red-dashboard",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"module",
												"node-red-dashboard"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3697"
										},
										{
											"key": "ETag",
											"value": "W/\"e71-mTENO1NFZZRfAwG4JEPq0P1yXTQ\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:53:52 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"node-red-dashboard\",\n    \"version\": \"3.6.5\",\n    \"local\": true,\n    \"user\": true,\n    \"path\": \"/data/node_modules/node-red-dashboard\",\n    \"nodes\": [\n        {\n            \"id\": \"node-red-dashboard/ui_base\",\n            \"name\": \"ui_base\",\n            \"types\": [\n                \"ui_base\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_button\",\n            \"name\": \"ui_button\",\n            \"types\": [\n                \"ui_button\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_dropdown\",\n            \"name\": \"ui_dropdown\",\n            \"types\": [\n                \"ui_dropdown\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_switch\",\n            \"name\": \"ui_switch\",\n            \"types\": [\n                \"ui_switch\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_slider\",\n            \"name\": \"ui_slider\",\n            \"types\": [\n                \"ui_slider\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_numeric\",\n            \"name\": \"ui_numeric\",\n            \"types\": [\n                \"ui_numeric\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_text_input\",\n            \"name\": \"ui_text_input\",\n            \"types\": [\n                \"ui_text_input\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_date_picker\",\n            \"name\": \"ui_date_picker\",\n            \"types\": [\n                \"ui_date_picker\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_colour_picker\",\n            \"name\": \"ui_colour_picker\",\n            \"types\": [\n                \"ui_colour_picker\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_form\",\n            \"name\": \"ui_form\",\n            \"types\": [\n                \"ui_form\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_text\",\n            \"name\": \"ui_text\",\n            \"types\": [\n                \"ui_text\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_gauge\",\n            \"name\": \"ui_gauge\",\n            \"types\": [\n                \"ui_gauge\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_chart\",\n            \"name\": \"ui_chart\",\n            \"types\": [\n                \"ui_chart\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_audio\",\n            \"name\": \"ui_audio\",\n            \"types\": [\n                \"ui_audio\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_toast\",\n            \"name\": \"ui_toast\",\n            \"types\": [\n                \"ui_toast\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_ui_control\",\n            \"name\": \"ui_ui_control\",\n            \"types\": [\n                \"ui_ui_control\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_template\",\n            \"name\": \"ui_template\",\n            \"types\": [\n                \"ui_template\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_link\",\n            \"name\": \"ui_link\",\n            \"types\": [\n                \"ui_link\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_tab\",\n            \"name\": \"ui_tab\",\n            \"types\": [\n                \"ui_tab\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_group\",\n            \"name\": \"ui_group\",\n            \"types\": [\n                \"ui_group\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_spacer\",\n            \"name\": \"ui_spacer\",\n            \"types\": [\n                \"ui_spacer\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        }\n    ],\n    \"plugins\": []\n}"
								}
							]
						},
						{
							"name": "26) POST module node-red-node-ui-table",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/module/node-red-node-ui-table",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"module",
										"node-red-node-ui-table"
									]
								},
								"description": "Through this request, we add to the HoleskytblSN Service Node a specific Node-RED module that is necessary for the Service Node to be capable to expose data on a Web page in tabular format. The task implementation that we will load into this Service Node in request # 27, relies on this module."
							},
							"response": [
								{
									"name": "26) POST module node-red-node-ui-table",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/module/node-red-node-ui-table",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"module",
												"node-red-node-ui-table"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "323"
										},
										{
											"key": "ETag",
											"value": "W/\"143-GNz62VHkYkCaf7vgWWmxP2/taC8\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:57:09 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"node-red-node-ui-table\",\n    \"version\": \"0.4.4\",\n    \"local\": true,\n    \"user\": true,\n    \"path\": \"/data/node_modules/node-red-node-ui-table\",\n    \"nodes\": [\n        {\n            \"id\": \"node-red-node-ui-table/ui_table\",\n            \"name\": \"ui_table\",\n            \"types\": [\n                \"ui_table\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-node-ui-table\",\n            \"version\": \"0.4.4\"\n        }\n    ],\n    \"plugins\": []\n}"
								}
							]
						},
						{
							"name": "27) PUT transformation: holeskytbl",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "holeskytbl"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the holeskytbl Node-RED subflow from the configured Transformation Library to this Service Node."
							},
							"response": [
								{
									"name": "27) PUT transformation: holeskytbl",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "holeskytbl"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "10"
										},
										{
											"key": "ETag",
											"value": "W/\"a-7mOHTrRCpFIPeuZylN9S1G4qOj0\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 12:59:27 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "holeskytbl"
								}
							]
						},
						{
							"name": "28) POST input node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "in"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/input",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"input"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through requests from # 29 to # 39. The client node is then connected to the input of the holeskytbl subflow in the Service Node, so that the subflow can receive the messages/transactions sent by HoleskywrtSN to the MQTT broker, and display them on a table on the Web.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more input ports through which the inputs flow. These ports are not automatically connected to the MQTT client node that we are creating and configuring in requests from # 29 to # 39. For this reason, it is necessary to explicitly wire the input of the business logic, to the output of the MQTT client node, which is what is done through request # 40."
							},
							"response": [
								{
									"name": "28) POST input node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "in"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/input",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"input"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-rxDvIN2QYLvurQr7xVOBpmr0Qu8\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:05:13 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "in"
								}
							]
						},
						{
							"name": "29) PUT input broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "29) PUT input broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:07:56 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "30) PUT input port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "30) PUT input port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:09:11 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "31) PUT input topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "blockchain/pendingtransactions"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"topic"
									]
								},
								"description": "This request configures the topic from where the input of the Service Node will come. The topic is in the MQTT broker that has been configured in the previous requests."
							},
							"response": [
								{
									"name": "31) PUT input topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "blockchain/pendingtransactions"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "30"
										},
										{
											"key": "ETag",
											"value": "W/\"1e-62GiiEYbjHDplaT8K+UWn3VY3xU\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:10:57 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "blockchain/pendingtransactions"
								}
							]
						},
						{
							"name": "32) PUT input qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "32) PUT input qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:12:36 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "33) PUT input usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "33) PUT input usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:12:50 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "34) PUT input tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "34) PUT input tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:13:02 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "35) PUT input tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "35) PUT input tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:13:14 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "36) PUT input tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "36) PUT input tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:13:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "37) PUT input tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "37) PUT input tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:13:41 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "38) PUT input tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "38) PUT input tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:13:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "39) PUT input credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "39) PUT input credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:14:11 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "40) POST wire in - holeskytblSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "holeskytbl"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/wire/in/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"wire",
										"in",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "40) POST wire in - holeskytblSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "holeskytbl"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/wire/in/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"wire",
												"in",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "10"
										},
										{
											"key": "ETag",
											"value": "W/\"a-7mOHTrRCpFIPeuZylN9S1G4qOj0\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:14:45 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "holeskytbl"
								}
							]
						},
						{
							"name": "41) Start HoleskytblSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the holeskytbl Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "41) Start HoleskytblSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:15:57 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the HoleskytblSN Service Node is configured. The purpose of this Service Node is to display the blockchain transactions in tabular format on the Web. As a part of this configuration, the Service Node listens to the blockchain/pendingtransactions topic of the MQTT broker created above in this collection, which is from where the transactions to be displayed come.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure HoleskywrtSN",
					"item": [
						{
							"name": "42) PUT transformation: holeskywrt",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "holeskywrt"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the holeskywrt Node-RED subflow from the configured Transformation Library to this Service Node."
							},
							"response": [
								{
									"name": "42) PUT transformation: holeskywrt",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "holeskywrt"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "10"
										},
										{
											"key": "ETag",
											"value": "W/\"a-NvhsJ5LsfkA5NXz0IZPMGJulJ4w\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:18:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "holeskywrt"
								}
							]
						},
						{
							"name": "42.1) POST config http_url",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "https://blockchain.googleapis.com/v1/projects/***/locations/us-central1/endpoints/ethereum-holesky/rpc?key=***"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/config/http_url",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"config",
										"http_url"
									]
								},
								"description": "Through this request, we use a configuration API that is exposed by the holeskywrt Node-RED subflow that we have just uploaded to the HoleskywrtSN Service Node, to configure the HTTPURL to be used for sending transactions to the blockchain.\n\nThe one included in the request is not a good URL. You can subscribe to the Blockchain RPC service of Google Cloud to obtain a valid URL, or to any other service provider of your choice."
							},
							"response": [
								{
									"name": "42.1) POST config http_url",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "https://blockchain.googleapis.com/v1/projects/***/locations/us-central1/endpoints/ethereum-holesky/rpc?key=***"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/config/http_url",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"config",
												"http_url"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "110"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"6e-RVULyfZzyRj3KI8IlntjmhWkS6E\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:23:19 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "https://blockchain.googleapis.com/v1/projects/***/locations/us-central1/endpoints/ethereum-holesky/rpc?key=***"
								}
							]
						},
						{
							"name": "42.2) POST config private_key",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "***"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/config/private_key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"config",
										"private_key"
									]
								},
								"description": "Through this request, we use a configuration API that is exposed by the holeskywrt Node-RED subflow that we have just uploaded to the HoleskywrtSN Service Node, to configure the private key of the sender's wallet to be used for sending transactions to the blockchain.\n\nThe one included in the request is not a good key. You can get a free wallet from a variety of providers, then figure out how to retrieve the private key of the wallet."
							},
							"response": [
								{
									"name": "42.2) POST config private_key",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "***"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/config/private_key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"config",
												"private_key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"3-NsPqoOHikPQeKBC66NlQLHhektk\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:26:10 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "***"
								}
							]
						},
						{
							"name": "43) POST output node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/output",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"output"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through requests from # 44 to # 54. This way the output generated by the execution of the task loaded into this Service Node (the hash of the new transaction sent to the blockchain, in this case) is published to the configured topic of the configured MQTT broker instance, and made available to other Service Nodes, which will listen to that same topic, and get input values from there, and publish their outputs to different configured topic(s) in the same or in other MQTT broker instances.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more output ports through which the generated outputs flow. These ports are not automatically connected to the MQTT client node that we are creating and configuring in requests from # 44 to # 54. For this reason, it is necessary to explicitly wire the output of the business logic, to the input of the MQTT client node, which is what is done through request # 55."
							},
							"response": [
								{
									"name": "43) POST output node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/output",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"output"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:32:52 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "44) PUT output broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "44) PUT output broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:33:40 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "45) PUT output port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "45) PUT output port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:34:32 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "46) PUT output topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "blockchain/newtransactionhash"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"topic"
									]
								},
								"description": "This request configures the topic of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "46) PUT output topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "blockchain/newtransactionhash"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "29"
										},
										{
											"key": "ETag",
											"value": "W/\"1d-Xc51QSd4X2LBFyj2b202hZ9XDbU\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:35:14 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "blockchain/newtransactionhash"
								}
							]
						},
						{
							"name": "47) PUT output qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "47) PUT output qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:36:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "48) PUT output usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "48) PUT output usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:36:40 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "49) PUT output tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "49) PUT output tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:36:53 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "50) PUT output tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "50) PUT output tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:37:05 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "51) PUT output tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "51) PUT output tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:37:25 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "52) PUT output tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "52) PUT output tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:37:42 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "53) PUT output tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "53) PUT output tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:38:12 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "54) PUT output credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/out/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"out",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "54) PUT output credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/out/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"out",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:38:23 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "55) POST wire holeskywrt - out",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/wire/holeskywrt/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"wire",
										"holeskywrt",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "55) POST wire holeskywrt - out",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/wire/holeskywrt/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"wire",
												"holeskywrt",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:38:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "56) Start HoleskywrtSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the holeskywrt Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "56) Start HoleskywrtSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Date",
											"value": "Sat, 25 Jan 2025 13:40:28 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the HoleskywrtSN Service Node is configured. After configuration, the Service Node will expose an API that can be used for submitting new transactions to the configured blockchain.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "The requests in this folder create the Network Factory, which is the Node-RED application that exposes the APIs for creating all the other components of the distributed system.\n\nThen, the Network Factory is used for creating three service nodes:\n\n- Holeskyskt, which manages the socket communication with the blockchain to get the newly submitted pending transactions in real-time.\n    \n- Holeskytbl, which is connected to the output of Holeskyskt through the MQTT broker, and which displays the transactions on the Web in a table.\n    \n- Holeskywrt, which exposes an API that can be called for submitting a new transaction to the Holesky blockchain.\n    \n\nIn addition to the three service nodes, other containerised utility software is installed and run, including Node-RED applications for access control, Node-RED applications that contain the implementation of all the different modules to be loaded to the Service Nodes, and the MQTT broker that is used for connecting Holeskyskt to Holeskytbl.\n\nIn end, there are the three configuration folders, one for each service node, in which requests are made directly to the newly creates service nodes for loading the software modules of interest into them, and for connecting the input and/or output to specific topics of the MQTT brokers, and for starting the execution of the software that has been loaded into the service node."
		},
		{
			"name": "Use",
			"item": [
				{
					"name": "57) Subscribe",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"eth_subscribe\",\"params\":[\"newPendingTransactions\",true]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:1884/subscribe",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "1884",
							"path": [
								"subscribe"
							]
						}
					},
					"response": [
						{
							"name": "57) Subscribe",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"eth_subscribe\",\"params\":[\"newPendingTransactions\",true]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:1884/subscribe",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "1884",
									"path": [
										"subscribe"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "70"
								},
								{
									"key": "ETag",
									"value": "W/\"46-eL5O6yxMpQtHJ3M4iy2fgoUaBMg\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:49:33 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x84e4b25216e3b639fd65f432b1396607\"\n}"
						}
					]
				},
				{
					"name": "58) Submit Transaction",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"to\":\"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\"value\":1}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:1886/transaction",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "1886",
							"path": [
								"transaction"
							]
						}
					},
					"response": [
						{
							"name": "58) Submit Transaction",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"to\":\"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\"value\":1}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:1886/transaction",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "1886",
									"path": [
										"transaction"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "148"
								},
								{
									"key": "ETag",
									"value": "W/\"94-OduaNryCB/70JwIZmWyeZCSONvQ\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:50:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\n    \"value\": 1,\n    \"transactionHash\": \"0xe50ee68355e828b6c37035fa5cddd43ee5c1c5455fff68cd16bc7b3a4032a8b5\"\n}"
						}
					]
				},
				{
					"name": "59) Unsubscribe",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"eth_unsubscribe\",\"params\":[ \"{{SubscriptionID}}\" ]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:1884/unsubscribe",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "1884",
							"path": [
								"unsubscribe"
							]
						}
					},
					"response": [
						{
							"name": "59) Unsubscribe",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"eth_unsubscribe\",\"params\":[ \"{{SubscriptionID}}\" ]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:1884/unsubscribe",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "1884",
									"path": [
										"unsubscribe"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "38"
								},
								{
									"key": "ETag",
									"value": "W/\"26-RaUuJ8g2L6etkZHX2/EmTW+lkN0\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:51:54 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
						}
					]
				},
				{
					"name": "60) Disconnect",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://localhost:1884/disconnect",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "1884",
							"path": [
								"disconnect"
							]
						}
					},
					"response": [
						{
							"name": "60) Disconnect",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://localhost:1884/disconnect",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "1884",
									"path": [
										"disconnect"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "ETag",
									"value": "W/\"15-pB8EG8pe9KqZLJYAO31+JK5Anqs\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:53:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"disconnected\": true\n}"
						}
					]
				}
			],
			"description": "Through the requests in this folder, we make use of the distributed system that we have created throught the previous requests in this collection.\n\nIn request # 57, we subscribe to the blockchain to receive in real-time the newly submitted pending requests. Then we can verify that everything works by opening a Web browser and connecting to [https://localhost:1885/ui,](https://localhost:1885/ui,) where a table is displayed to which transactions are added in real-time.\n\nThen we submit our own transaction in request # 58, and if we keep the page of the Web browser opened we can see our own transaction appearing in the list.\n\nThen we unsubscribe in request #59, and then the Web table will stop to be updated.\n\nThen we can optionally terminate the socket connection."
		},
		{
			"name": "Dismiss",
			"item": [
				{
					"name": "61) Switch off HoleskysktSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/HoleskysktSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"HoleskysktSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "61) Switch off HoleskysktSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/HoleskysktSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"HoleskysktSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:54:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "62) Remove HoleskysktSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/HoleskysktSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"HoleskysktSN"
							]
						}
					},
					"response": [
						{
							"name": "62) Remove HoleskysktSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/HoleskysktSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"HoleskysktSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:56:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "63) Switch off HoleskytblSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/HoleskytblSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"HoleskytblSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "63) Switch off HoleskytblSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/HoleskytblSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"HoleskytblSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:57:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "64) Remove HoleskytblSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/HoleskytblSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"HoleskytblSN"
							]
						}
					},
					"response": [
						{
							"name": "64) Remove HoleskytblSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/HoleskytblSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"HoleskytblSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:57:27 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "65) Switch off HoleskywrtSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/HoleskywrtSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"HoleskywrtSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "65) Switch off HoleskywrtSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/HoleskywrtSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"HoleskywrtSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:57:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "66) Remove HoleskywrtSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/HoleskywrtSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"HoleskywrtSN"
							]
						}
					},
					"response": [
						{
							"name": "66) Remove HoleskywrtSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/HoleskywrtSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"HoleskywrtSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:57:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "67) Switch off ServiceNodeDefaultACL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/ServiceNodeDefaultACL/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"ServiceNodeDefaultACL",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "67) Switch off ServiceNodeDefaultACL",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/ServiceNodeDefaultACL/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"ServiceNodeDefaultACL",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:58:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "68) Remove ServiceNodeDefaultACL",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/ServiceNodeDefaultACL",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"ServiceNodeDefaultACL"
							]
						}
					},
					"response": [
						{
							"name": "68) Remove ServiceNodeDefaultACL",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/ServiceNodeDefaultACL",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"ServiceNodeDefaultACL"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:58:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "69) Switch off MqttBrokerDefaultACL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/MqttBrokerDefaultACL/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"MqttBrokerDefaultACL",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "69) Switch off MqttBrokerDefaultACL",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/MqttBrokerDefaultACL/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"MqttBrokerDefaultACL",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:58:41 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "70) Remove MqttBrokerDefaultACL",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/MqttBrokerDefaultACL",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"MqttBrokerDefaultACL"
							]
						}
					},
					"response": [
						{
							"name": "70) Remove MqttBrokerDefaultACL",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/MqttBrokerDefaultACL",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"MqttBrokerDefaultACL"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:58:52 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "71) Switch off DefaultMqttBroker",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/DefaultMqttBroker/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"DefaultMqttBroker",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "71) Switch off DefaultMqttBroker",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/DefaultMqttBroker/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"DefaultMqttBroker",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:59:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "72) Remove DefaultMqttBroker",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/DefaultMqttBroker",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"DefaultMqttBroker"
							]
						}
					},
					"response": [
						{
							"name": "72) Remove DefaultMqttBroker",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/DefaultMqttBroker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"DefaultMqttBroker"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:59:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "73) Switch off DefaultTransformationLibrary",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/DefaultTransformationLibrary/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"DefaultTransformationLibrary",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "73) Switch off DefaultTransformationLibrary",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/DefaultTransformationLibrary/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"DefaultTransformationLibrary",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:59:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "74) Remove DefaultTransformationLibrary",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Blockchain/DefaultTransformationLibrary",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Blockchain",
								"DefaultTransformationLibrary"
							]
						}
					},
					"response": [
						{
							"name": "74) Remove DefaultTransformationLibrary",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Blockchain/DefaultTransformationLibrary",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Blockchain",
										"DefaultTransformationLibrary"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 13:59:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "75) Remove fence",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/fence/Blockchain",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"fence",
								"Blockchain"
							]
						}
					},
					"response": [
						{
							"name": "75) Remove fence",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/fence/Blockchain",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"fence",
										"Blockchain"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "ETag",
									"value": "W/\"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk\""
								},
								{
									"key": "Date",
									"value": "Sat, 25 Jan 2025 14:00:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "Through the requests in this folder, we clean up our Docker Host removing everything that we have created for the purposes of this demo."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if(\"57) Subscribe\" == pm.info.requestName) {\r",
					"    pm.collectionVariables.set(\r",
					"        \"SubscriptionID\", \r",
					"        pm.response.json().result\r",
					"    );\r",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "DockerHost",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "SubscriptionID",
			"value": "--",
			"type": "string"
		}
	]
}