swagger: '2.0'
info:
  description: >-
    Service Nodes are a key result produced in the context of the research
    activity described in the scientific literature by Mirco Soderi, Vignesh
    Kamath, John G. Breslin from June 2021 onward at the Data Science Institute,
    National University of Ireland, Galway, and related to Ubiquitous Big Data
    Engineering and Analytics as a Service with a special focus to the
    Intelligent Manufacturing, also said the Industry 4.0. The starting point is
    anyway the Network Factory. Download the Docker image
    msoderi/network-factory and run a container from that. Map port 1880 to one
    of your choice. Use the resulting endpoint to make the API requests. Refer
    to the API documentation dedicated to the Network Factory, and kept
    separated from this documentation, to learn more about the Network Factory
    and how to use it. All documentation has been originally published and is
    kept up-to-date in the GitHub repository
    https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service
    where you will find all the most recent versions of all the artifacts
    produced in the context of this research activity. Coming to the Service
    Nodes, they are meant to be deployed in the logical/physical nearby of the
    manufactury plant, so tipically in premise, and not on the Cloud. They are
    Node-RED applications, and they perform data reading (for example from
    sensing devices through a range of well-known protocols, or other), writing
    (for example to a local filesystem, or to an event streaming server relying
    on Node-RED Kafka client module(s)), and transformations. The operations
    that Service Nodes can perform correspond to the software modules that are
    available and ready to use in the Transformation Library, a special Node-RED
    application where nothing is executed; indeed, it is just a container of
    modules ready to be loaded onto Service Nodes. Anyway, Service Nodes are not
    meant to process Big Data, or execute Machine Learning algorithms, or
    similar. Service Nodes interface with an Artificial Intelligence Server for
    that. All Service Nodes expose a common set of APIs that are for configuring
    all possible aspects of the Service Node, so the task to be performed, the
    input, the output, graphical aspects, everything that could be of interest.
    These APIs are described in this documentation. A **Crazy Node** is a
    Service Node where APIs are available that allow to operate (create, delete,
    configure) at the level of the single piece of transformation, or of the
    single interface component, instead of only at level of entire
    transformation or interface to be implemented by the node.
  version: 1.0.0
  title: Crazy Node
  contact:
    email: mirco.soderi@universityofgalway.ie
schemes:
  - https
  - http
paths:
  /node/transformation:
    post:
      tags:
        - Business Logic
      summary: >-
        Load a custom task from the Transformation Library onto the Service
        Node. Use the request body to specify the task to be loaded by name.
      consumes:
        - text/plain
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/module/{moduleName}:
    post:
      tags:
        - Business Logic
      summary: >-
        Install a Node-RED module (palette) in this Service Node. Do this prior
        to call the transformation if the task that must be executed in the
        Service Node includes Node-RED nodes that are not part of the
        standard/default Node-RED palette.
      parameters:
        - in: path
          name: moduleName
          description: The Node-RED module (palette) to be loaded.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    get:
      tags:
        - Business Logic
      summary: >-
        Retrieve the implementation of a specific Node-RED module (palette)
        currently installed in the Service Node.
      parameters:
        - in: path
          name: moduleName
          description: >-
            The Node-RED module (palette) whose implementation must be
            retrieved.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    delete:
      tags:
        - Business Logic
      summary: Uninstall a Node-RED palette from this Service Node.
      parameters:
        - in: path
          name: moduleName
          description: The Node-RED module (palette) to be uninstalled.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/input:
    post:
      tags:
        - Input/Output
      summary: >-
        Instantiate a Node-RED MQTT client node, initially disconnected from
        everything, and to be configured. Once configured and connected, it will
        be the data source for this Service Node. Put the name of the new client
        node in the request body. You will use that when configuring and wiring
        the node.
      consumes:
        - text/plain
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/input/{nodeName}:
    delete:
      tags:
        - Input/Output
      summary: >-
        Delete a Node-RED MQTT client node used by this Service Node as a data
        source, by name.
      parameters:
        - in: path
          name: nodeName
          description: The name of the node to be deleted.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/output:
    post:
      tags:
        - Input/Output
      summary: >-
        Instantiate a Node-RED MQTT client node, initially disconnected from
        everything, and to be configured. Once configured and connected, it will
        be where the outputs of this Service Node will be written. Put the name
        of the new client node in the request body. You will use that when
        configuring and wiring the node.
      consumes:
        - text/plain
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/output/{nodeName}:
    delete:
      tags:
        - Input/Output
      summary: >-
        Delete a Node-RED MQTT client node used by this Service Node as an
        output destination, by name.
      parameters:
        - in: path
          name: nodeName
          description: The name of the node to be deleted.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/wire/{from}/{num}:
    post:
      tags:
        - Input/Output
      summary: >-
        Crate a wire from a specified output port of a specified Node-RED
        (source) node, to the input port of a specified Node-RED (destination)
        node. Put the name of the destination node in the request body.
      parameters:
        - in: path
          name: from
          description: The name of the source node.
          required: true
          type: string
        - in: path
          name: num
          description: >-
            The number of the output port to be connected, among those that are
            available in the source node.
          required: true
          type: integer
      consumes:
        - text/plain
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    delete:
      tags:
        - Input/Output
      summary: >-
        Delete a wire that is currently originating from a specified output port
        of a specified Node-RED node.
      parameters:
        - in: path
          name: from
          description: The name of the source node.
          required: true
          type: string
        - in: path
          name: num
          description: The number of the output port.
          required: true
          type: integer
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/{nodeName}/{nodeProperty}:
    put:
      tags:
        - Input/Output
      summary: Set a configuration parameter. The value goes in the request body.
      parameters:
        - in: path
          name: nodeName
          description: >-
            The name of the node where the configuration parameter must be set
            or updated.
          required: true
          type: string
        - in: path
          name: nodeProperty
          description: The name of the configuration parameter to be set or updated.
          required: true
          type: string
          enum:
            - broker
            - topic
            - datatype
            - qos
            - usetls
            - cert
            - key
            - ca
            - verifyservercert
            - servername
            - port
            - credentials
            - x
            - 'y'
      consumes:
        - text/plain
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    get:
      tags:
        - Input/Output
      summary: >-
        Get the value of a configuration parameter in an input or output node in
        this Service Node.
      parameters:
        - in: path
          name: nodeName
          description: The name of the input or output node.
          required: true
          type: string
        - in: path
          name: nodeProperty
          description: The name of the configuration parameter to be retrieved.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/{command}:
    post:
      tags:
        - Control
      summary: >-
        Start or stop this Service Node. That corresponds to enabling or
        disabling the subflow where the business logic is implemented.
      parameters:
        - in: path
          name: command
          description: The control command to be delivered to this Service Node.
          required: true
          type: string
          enum:
            - start
            - stop
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    get:
      tags:
        - Control
      summary: Retrieve the current status of this Service Node (on/off).
      parameters:
        - in: path
          name: command
          required: true
          type: string
          enum:
            - status
      produces:
        - text/plain
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/inner/{type}/{name}:
    post:
      tags:
        - Craziness
      summary: Add a new processing step or interface component
      description: >-
        Adding a new processing step or interface component essentially
        corresponds to adding a new node. The body is expected to be a JSON.
        Refer to the JSON representation of the specific Node-RED node that you
        are willing to add, to know what parameters are available, and how they
        are represented. Refer to the Node-RED documentation for the specific
        node that you are willing to add, for getting full details about the
        functioning of the node and how it is affected by the different
        configuration parameters.
      parameters:
        - in: path
          name: type
          description: The type of the new Node-RED node
          required: true
          type: string
        - in: path
          name: name
          description: >-
            The name to be given to the new Node-RED node to be added. The name
            is very important. Nodes are identified by name in APIs for
            (re)configuration and deletion.
          required: true
          type: string
      consumes:
        - application/json
      responses:
        '201':
          description: OK, created.
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/inner/{name}:
    get:
      tags:
        - Craziness
      summary: >-
        Get the current configuration of a processing step or interface
        component
      description: >-
        Getting the current configuration of a processing step or interface
        component essentially corresponds to getting the JSON representation of
        a Node-RED node. Refer to the Node-RED documentation of the specific
        type of node for interpreting the JSON object that is returned by this
        API.
      parameters:
        - in: path
          name: name
          description: The name of the Node-RED node of interest.
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    put:
      tags:
        - Craziness
      summary: Reconfigure a processing step or interface component
      description: >-
        Reconfiguring a processing step or interface component essentially
        corresponds to modifying some parameters in a Node-RED node. The body is
        expected to be a JSON. Refer to the JSON representation of the specific
        type of Node-RED node, to know what parameters are available, and how
        they are represented. Refer to the Node-RED documentation for the
        specific type of node, for getting full details about the functioning of
        the node and how it is affected by the different configuration
        parameters.
      parameters:
        - in: path
          name: name
          description: The name of the Node-RED node to be reconfigured.
          required: true
          type: string
      consumes:
        - application/json
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    delete:
      tags:
        - Craziness
      summary: Delete a processing step or interface component
      description: >-
        Deleting a processing step or interface component essentially
        corresponds to deleting a Node-RED node.
      parameters:
        - in: path
          name: name
          description: The name of the Node-RED node to be deleted.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/uigrouptab/{groupName}/{tabName}:
    put:
      tags:
        - Craziness
      summary: >-
        In the process of bulding a user interface, bind a group of components
        to a tab.
      description: >-
        That essentially corresponds to setting the tab property of a UI group
        node. UI group nodes are Node-RED configuration nodes that come with the
        Node-RED dashboard module/palette.
      parameters:
        - in: path
          name: groupName
          description: The name of the group to be binded to the tab.
          required: true
          type: string
        - in: path
          name: tabName
          description: The name of the tab to which the group must be binded.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/uielmtgrp/{elmtName}/{groupName}:
    put:
      tags:
        - Craziness
      summary: Bind a UI element to a UI group.
      description: >-
        That essentially corresponds to setting the group property of a UI
        element. UI elements are created and configured by means of Node-RED
        nodes that come with the Node-RED dashboard module/palette.
      parameters:
        - in: path
          name: elmtName
          description: The name of the UI element to be binded to the group.
          required: true
          type: string
        - in: path
          name: groupName
          description: The name of the UI group to which the UI element must be binded.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/subflow/{name}/output:
    get:
      tags:
        - Craziness
      summary: Retrieve the configuration of the outputs for the targeted task
      description: >-
        The value of the out property in the JSON representation of the targeted
        Node-RED subflow is provided back.
      parameters:
        - in: path
          name: name
          description: The name of the Node-RED subflow of interest.
          required: true
          type: string
      produces:
        - application/json
      responses:
        '201':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    post:
      tags:
        - Craziness
      summary: Add a output port to the targeted task
      description: >-
        That corresponds to adding a new output port to the targeted Node-RED
        subflow. The body of the request is expected to be a JSON with
        properties x, and y, which specify where the node that corresponds to
        the new output port must appear, in the Node-RED workspace associated to
        the targeted subflow.
      parameters:
        - in: path
          name: name
          description: The name of the Node-RED subflow to be edited.
          required: true
          type: string
      consumes:
        - application/json
      responses:
        '201':
          description: OK, created.
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/subflow/{subflow}/output/{node}/to/{port}:
    post:
      tags:
        - Craziness
      summary: Connect a node in the task implementation to an output port
      description: >-
        That corresponds to graphically wiring the targeted Node-RED node to the
        targeted output node inside of the targeted Node-RED subflow.
      parameters:
        - in: path
          name: subflow
          description: >-
            The name of the subflow inside of which the operation must be
            performed.
          required: true
          type: string
        - in: path
          name: node
          description: The name of the Node-RED node to be wired to the output port.
          required: true
          type: string
        - in: path
          name: port
          description: >-
            The number of the output port to which the Node-RED node must be
            wired.
          required: true
          type: number
      responses:
        '201':
          description: OK, created.
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    delete:
      tags:
        - Craziness
      summary: Disconnect a node in the task implementation from an output port
      description: >-
        That corresponds to graphically deleting the wire that connects the
        targeted Node-RED node to the targeted output node inside of the
        targeted Node-RED subflow.
      parameters:
        - in: path
          name: subflow
          description: >-
            The name of the subflow inside of which the operation must be
            performed.
          required: true
          type: string
        - in: path
          name: node
          description: >-
            The name of the Node-RED node to be disconnected from the output
            port.
          required: true
          type: string
        - in: path
          name: port
          description: >-
            The number of the output port from which the Node-RED node must be
            disconnected.
          required: true
          type: number
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/subflow/{name}/input:
    get:
      tags:
        - Craziness
      summary: Retrieve the configuration of the input for the targeted task
      description: >-
        The value of the in property in the JSON representation of the targeted
        Node-RED subflow is provided back.
      parameters:
        - in: path
          name: name
          description: The name of the Node-RED subflow of interest.
          required: true
          type: string
      produces:
        - application/json
      responses:
        '201':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
    post:
      tags:
        - Craziness
      summary: Create/Reset the input port for the targeted task
      description: >-
        That corresponds to adding a new input port to the targeted Node-RED
        subflow, or to resetting its configuration, including wires. The body of
        the request is expected to be a JSON with properties x, and y, which
        specify where the node that corresponds to the input port must appear,
        in the Node-RED workspace associated to the targeted subflow.
      parameters:
        - in: path
          name: name
          description: The name of the Node-RED subflow to be edited.
          required: true
          type: string
      consumes:
        - application/json
      responses:
        '201':
          description: OK, created.
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/subflow/{subflow}/wire/{node}/to/input:
    post:
      tags:
        - Craziness
      summary: Connect a node in the task implementation to the input port
      description: >-
        That corresponds to graphically wiring the targeted Node-RED node to the
        input node inside of the targeted Node-RED subflow.
      parameters:
        - in: path
          name: subflow
          description: >-
            The name of the subflow inside of which the operation must be
            performed.
          required: true
          type: string
        - in: path
          name: node
          description: The name of the Node-RED node to be wired to the input port.
          required: true
          type: string
      responses:
        '201':
          description: OK, created.
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
  /node/subflow/{subflow}/input/{node}:
    delete:
      tags:
        - Craziness
      summary: Disconnect a node in the task implementation from the input port
      description: >-
        That corresponds to graphically deleting the wire that connects the
        targeted Node-RED node to the input node inside of the targeted Node-RED
        subflow.
      parameters:
        - in: path
          name: subflow
          description: >-
            The name of the subflow inside of which the operation must be
            performed.
          required: true
          type: string
        - in: path
          name: node
          description: >-
            The name of the Node-RED node to be disconnected from the input
            port.
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Malformed request
        '500':
          description: Unexpected error
