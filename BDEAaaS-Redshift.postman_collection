{
	"info": {
		"_postman_id": "8bf66373-108f-4f0f-bd0d-f381d64402c9",
		"name": "BDEAaaS Redshift",
		"description": "This collection is aimed at providing a working example of integration of Cloud Analytics (in this specific case, the creation and usage of a clustering model in AWS Redshift Serverless) in our framework for Ubiquitous Computing as a Service, which was initially applied to Reconfigurable Manufacturing, but is actually general enough to be applied to a range of other use cases, including some in environmental sustainability. Please refer to our [GitHub repository](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service) to learn more about the framework.\n\nThere is a Postman variable defined at the collection level, which is named DockerHost, and that is unsurprisingly aimed at containing the name of the host where the Docker engine is running that will be used for this demo. The default value is localhost, which is okay if you have a Docker engine running on the same machine from where you send the API requests contained in this collection, and you want to use it for the purposes of this demo.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16531967"
	},
	"item": [
		{
			"name": "Build",
			"item": [
				{
					"name": "Instantiate Network Factory",
					"item": [
						{
							"name": "1) Pull Network Factory Image",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{DockerHost}}:2375/images/create?fromImage=msoderi/network-factory&tag=0.15",
									"host": [
										"{{DockerHost}}"
									],
									"port": "2375",
									"path": [
										"images",
										"create"
									],
									"query": [
										{
											"key": "fromImage",
											"value": "msoderi/network-factory"
										},
										{
											"key": "tag",
											"value": "0.15"
										}
									]
								},
								"description": "Thanks to this request, the msoderi/network-factory Docker Image becomes available in your local Docker installation, or in the specified DockerHost, if different from the default (localhost). The image is retrieved from Docker Hub.\n\nThe execution time can be longer or shorter depending on whether or not the image of interest is already available on the Docker Host as a result of a past download."
							},
							"response": [
								{
									"name": "1) Pull Network Factory Image",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{DockerHost}}:2375/images/create?fromImage=msoderi/network-factory&tag=0.15",
											"host": [
												"{{DockerHost}}"
											],
											"port": "2375",
											"path": [
												"images",
												"create"
											],
											"query": [
												{
													"key": "fromImage",
													"value": "msoderi/network-factory"
												},
												{
													"key": "tag",
													"value": "0.15"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Api-Version",
											"value": "1.47"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 16:48:36 GMT"
										},
										{
											"key": "Docker-Experimental",
											"value": "false"
										},
										{
											"key": "Ostype",
											"value": "linux"
										},
										{
											"key": "Server",
											"value": "Docker/27.4.0 (linux)"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\"status\":\"Pulling from msoderi/network-factory\",\"id\":\"0.15\"}\r\n{\"status\":\"Digest: sha256:17fe681dee3d37f8582fef96ddcdd63b9b6b2cdd1e5aabb23e0d85aacb0d8681\"}\r\n{\"status\":\"Status: Image is up to date for msoderi/network-factory:0.15\"}\r\n"
								}
							]
						},
						{
							"name": "2) Create Network Factory",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n     \"Image\": \"msoderi/network-factory:0.15\",\r\n     \"HostConfig\": {\r\n         \"PortBindings\": {\r\n             \"1880/tcp\": [\r\n                 {\r\n                     \"HostPort\": \"585\"\r\n                 }\r\n             ]\r\n         }\r\n     },\r\n     \"ExposedPorts\": {\r\n         \"1880/tcp\": {}\r\n     }\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{DockerHost}}:2375/containers/create?name=BDEAaaS-Factory",
									"host": [
										"{{DockerHost}}"
									],
									"port": "2375",
									"path": [
										"containers",
										"create"
									],
									"query": [
										{
											"key": "name",
											"value": "BDEAaaS-Factory"
										}
									]
								},
								"description": "Through this request, you create a Docker container from the msoderi/network-factory Docker Image. The container is created on DockerHost, which is your localhost, unless otherwise specified."
							},
							"response": [
								{
									"name": "2) Create Network Factory",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n     \"Image\": \"msoderi/network-factory:0.15\",\r\n     \"HostConfig\": {\r\n         \"PortBindings\": {\r\n             \"1880/tcp\": [\r\n                 {\r\n                     \"HostPort\": \"585\"\r\n                 }\r\n             ]\r\n         }\r\n     },\r\n     \"ExposedPorts\": {\r\n         \"1880/tcp\": {}\r\n     }\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{DockerHost}}:2375/containers/create?name=BDEAaaS-Factory",
											"host": [
												"{{DockerHost}}"
											],
											"port": "2375",
											"path": [
												"containers",
												"create"
											],
											"query": [
												{
													"key": "name",
													"value": "BDEAaaS-Factory"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Api-Version",
											"value": "1.47"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 16:49:32 GMT"
										},
										{
											"key": "Docker-Experimental",
											"value": "false"
										},
										{
											"key": "Ostype",
											"value": "linux"
										},
										{
											"key": "Server",
											"value": "Docker/27.4.0 (linux)"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"Id\": \"30e963318d8079f581f2d718ba951c32a36bce9887daee63b1778ee4f25c3724\",\n    \"Warnings\": []\n}"
								}
							]
						},
						{
							"name": "3) Start Network Factory",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{DockerHost}}:2375/containers/BDEAaaS-Factory/start",
									"host": [
										"{{DockerHost}}"
									],
									"port": "2375",
									"path": [
										"containers",
										"BDEAaaS-Factory",
										"start"
									]
								},
								"description": "Through this request, you start the Docker container you created through request 2, and have a Network Factory up and running in your target device, which is by default your local device."
							},
							"response": [
								{
									"name": "3) Start Network Factory",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{DockerHost}}:2375/containers/BDEAaaS-Factory/start",
											"host": [
												"{{DockerHost}}"
											],
											"port": "2375",
											"path": [
												"containers",
												"BDEAaaS-Factory",
												"start"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Api-Version",
											"value": "1.47"
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 16:53:55 GMT"
										},
										{
											"key": "Docker-Experimental",
											"value": "false"
										},
										{
											"key": "Ostype",
											"value": "linux"
										},
										{
											"key": "Server",
											"value": "Docker/27.4.0 (linux)"
										}
									],
									"cookie": [],
									"body": null
								}
							]
						}
					],
					"description": "Please find below here some generic information about the Network Factory.\n\nThe requests in this folder are for pulling the msoderi/network-factory image from Docker Hub, and then creating and running a container from it. The Network Factory is a Node-RED application. Having a running container of the Network Factory in a device means having the possibility of installing, configuring, and operating arbitrary software on that device from remote, including some notable software components that we will get to know along our way through this getting started collection, such as Service Nodes, Crazy Nodes, Library Nodes, AI Server Nodes, Context Brokers, ACL Nodes, in a secure and reliable manner.\n\n**Customizing the Network Factory**\n\nIf you wish to inspect the implementation and customize the Network Factory, instead of just using the provided Docker Image, do the following:\n\n- Run a Node-RED Docker Container with an associated [Docker Volume](https://docs.docker.com/storage/volumes/) mapped on the path /data\n    \n- [Restore](https://docs.docker.com/storage/volumes/#restore-volume-from-a-backup) the [Network Factory Docker Volume Backup](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/networkfactory.tar) to the Docker Volume associated to your newly created Docker Container\n    \n- Restart your Node-RED container, and connect to its Web interface\n    \n\nYou are now free to inspect the Network Factory default implementation.\n\nFeel free to make all necessary modifications, then [backup](https://docs.docker.com/storage/volumes/#back-up-a-volume) the Docker Volume for future usage."
				},
				{
					"name": "Create and Organize Nodes",
					"item": [
						{
							"name": "4) Create Fence",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/fence/:name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"fence",
										":name"
									],
									"variable": [
										{
											"key": "name",
											"value": "Redshift"
										}
									]
								},
								"description": "This request creates a fence (user-defined Docker network) named Redshift on the targeted Docker Host."
							},
							"response": [
								{
									"name": "4) Create Fence",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/fence/:name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"fence",
												":name"
											],
											"variable": [
												{
													"key": "name",
													"value": "Redshift"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "87"
										},
										{
											"key": "ETag",
											"value": "W/\"57-1JyhV7EOfNz2NLotuXBxSb9VpKw\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 16:58:14 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"Id\": \"c7349bd5aadbf2378200b2323de931a7d69742386f5daedfe2071dbc3da8b71b\",\n    \"Warning\": \"\"\n}"
								}
							]
						},
						{
							"name": "5) Create Service Node ACL",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/servicenodeacl",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"servicenodeacl"
									]
								},
								"description": "This request creates a placeholder implentation of the access control logic which is relied on by all Service Nodes that will be created for the purposes of this demo. The ACL API is created in the Redshift fence (so it is connected to the Redshift user-defined Docker network)."
							},
							"response": [
								{
									"name": "5) Create Service Node ACL",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/servicenodeacl",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"servicenodeacl"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "422"
										},
										{
											"key": "ETag",
											"value": "W/\"1a6-UvTZvfYjgK0fUpBnre4fbiUXkvc\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:01:46 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"ServiceNodeDefaultACL\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenodeacl.tar\",\n    \"ports\": {},\n    \"env\": [],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "6) Create Transformation Library",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/transformationlibrary",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"transformationlibrary"
									]
								},
								"description": "This request creates a default Transformation Library, which is used by all Service Nodes that will be created for the purposes of this demo. The library is created in the Redshift fence (so it is connected to the Redshift user-defined Docker network).\n\nAs the number of reusable modules in the library grows, the time required for downloading the archive from GitHub also grows, which may cause Postman to return a socket hang up error after some time. Please ignore that error, and monitor the containers on the Docker Host. When you can see the DefaultTransformationLibrary container up and running, you are ready to proceed with the following requests. You may want to create your own Transformation Library that only contains the reusable modules of your interest; that would reduce the size of the archive and prevent these problems from happening."
							},
							"response": [
								{
									"name": "6) Create Transformation Library",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/transformationlibrary",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"transformationlibrary"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "453"
										},
										{
											"key": "ETag",
											"value": "W/\"1c5-KK2p8t5LZH08EJp7sTLlHr0AJgs\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:04:25 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"DefaultTransformationLibrary\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/transformationlibrary.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1880\"\n    },\n    \"env\": [],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "7) Create MQTT Broker ACL",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/brokeracl",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"brokeracl"
									]
								},
								"description": "This requests create a placeholder implementation the access control logic which is relied on by the EMQX MQTT broker instance that will be created for the purposes of this demo. The ACL API is created in the Redshift fence."
							},
							"response": [
								{
									"name": "7) Create MQTT Broker ACL",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/brokeracl",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"brokeracl"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "416"
										},
										{
											"key": "ETag",
											"value": "W/\"1a0-43/xH/vunbWZRQXlA7Mnk4JzYlo\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:06:05 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"MqttBrokerDefaultACL\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/brokeracl.tar\",\n    \"ports\": {},\n    \"env\": [],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "8) Create MQTT Broker",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"broker"
									]
								},
								"description": "Through this request, an instance of the EMQX MQTT broker is created in the Redshift fence. The broker is used for data exchange among the Service Nodes that are used for this demo.\n\nThe request may take longer or shorter to execute depending on whether the image of interest needs to be downloaded from Docker Hub, or it is already available in the Docker Host because of some past request.\n\nSometimes, if the image needs to be downloaded and the connection speed is not high enough, Postman may return a socket hang up error. Please ignore that error, and monitor the Docker containers. When you have a DefaultMqttBroker container up and running, you are ready to proceed with the following requests."
							},
							"response": [
								{
									"name": "8) Create MQTT Broker",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"broker"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "410"
										},
										{
											"key": "ETag",
											"value": "W/\"19a-+c7gVqSOo4rgYrV6NmxR8cj8G/I\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:08:09 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"DefaultMqttBroker\",\n    \"image\": \"emqx/emqx:4.3.2\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/mqttbroker.tar\",\n    \"ports\": {},\n    \"env\": [],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/opt/emqx\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "9) Create InjectAwsrstbliSN Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InjectAwsrstbliSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1884\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"servicenode"
									]
								},
								"description": "In this request the InjectAwsrstbliSN Service Node is created in the Redshift fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1884, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1884. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "9) Create InjectAwsrstbliSN Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"InjectAwsrstbliSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1884\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "751"
										},
										{
											"key": "ETag",
											"value": "W/\"2ef-bAITa3KEYRHwKkhEjDTq5H7hGf0\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:10:38 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"InjectAwsrstbliSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1884\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "10) Create AwsrstbliSN Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"AwsrstbliSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1885\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"servicenode"
									]
								},
								"description": "In this request the AwsrstbliSN Service Node is created in the Redshift fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1885, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1885. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "10) Create AwsrstbliSN Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"AwsrstbliSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1885\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "745"
										},
										{
											"key": "ETag",
											"value": "W/\"2e9-j3R7H8e+S5VHH0IvyrY77nAviIg\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:13:58 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"AwsrstbliSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1885\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "11) Create AwsrskmcSN Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"AwsrskmcSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1886\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"servicenode"
									]
								},
								"description": "In this request the AwsrskmcSN Service Node is created in the Redshift fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1886, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1886. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "11) Create AwsrskmcSN Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"AwsrskmcSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1886\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "744"
										},
										{
											"key": "ETag",
											"value": "W/\"2e8-V3DoPj5zs6gtjh5IFPlCN2hgYFY\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:18:23 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"AwsrskmcSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1886\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "12) Create InjectAwsrskmpSN Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"InjectAwsrskmpSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1887\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"servicenode"
									]
								},
								"description": "In this request the InjectAwsrskmpSN Service Node is created in the Redshift fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1887, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1887. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "12) Create InjectAwsrskmpSN Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"InjectAwsrskmpSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1887\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "750"
										},
										{
											"key": "ETag",
											"value": "W/\"2ee-xn5Jk9uf4oU8afiE6wlSgEhCT4E\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:21:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"InjectAwsrskmpSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1887\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "13) Create AwsrskmpSN Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"AwsrskmpSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1888\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"servicenode"
									]
								},
								"description": "In this request the AwsrskmpSN Service Node is created in the Redshift fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1888, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1888. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "13) Create AwsrskmpSN Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"AwsrskmpSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1888\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "744"
										},
										{
											"key": "ETag",
											"value": "W/\"2e8-DvaX8uK0u8xwHP9O8NiQ/3AHHFk\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:23:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"AwsrskmpSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1888\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "14) Create CreateHtmlSN Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"CreateHtmlSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1889\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"servicenode"
									]
								},
								"description": "In this request the CreateHtmlSN Service Node is created in the Redshift fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1889, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1889. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "14) Create CreateHtmlSN Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"CreateHtmlSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1889\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "746"
										},
										{
											"key": "ETag",
											"value": "W/\"2ea-E9/fQ2j0yDnLXMmfX6Ll+a/QWjI\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:27:25 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"CreateHtmlSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1889\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						},
						{
							"name": "15) Create DisplayHtmlSN Service Node",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"DisplayHtmlSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1890\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"servicenode"
									]
								},
								"description": "In this request the DisplayHtmlSN Service Node is created in the Redshift fence. The default Node-RED Web interface port, 1880, is explicitly mapped to port number 1890, so that it will be possible to access the Web interface, and most important, to make requests to the configuration APIs implemented in the node, by connecting to the Docker Host (by default, localhost) on port 1890. This is the way how software components created in a fence are made accessible from the external. The URLs of the ACL API to be used by the node (CFG_ACL_ENDP), and of the Transformation Library (NRLIB_ENDP), are configured as environment variables. The node is not configured, so it is running but it executes nothing, and is connected to nothing. It will be configured later in this collection."
							},
							"response": [
								{
									"name": "15) Create DisplayHtmlSN Service Node",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"DisplayHtmlSN\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"1890\"\r\n    },\r\n    \"env\": [\r\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\r\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:585/Redshift/servicenode",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "585",
											"path": [
												"Redshift",
												"servicenode"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "747"
										},
										{
											"key": "ETag",
											"value": "W/\"2eb-psYHhKK517ZtoWohF5/je+TqO/g\""
										},
										{
											"key": "Date",
											"value": "Fri, 31 Jan 2025 17:29:30 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"engine\": \"http://host.docker.internal:2375\",\n    \"fence\": \"Redshift\",\n    \"name\": \"DisplayHtmlSN\",\n    \"image\": \"nodered/node-red:latest\",\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/servicenode.tar\",\n    \"ports\": {\n        \"1880/tcp\": \"1890\"\n    },\n    \"env\": [\n        \"NRADM_USER=nradm\",\n        \"NRADM_PASS=nradmpass\",\n        \"CFG_ACL_ENDP=https://ServiceNodeDefaultACL:1880/acl\",\n        \"CFG_ACL_CACE=/data/ca.pem\",\n        \"NRLIB_ENDP=https://DefaultTransformationLibrary:1880/\",\n        \"NRLIB_USER=nruser\",\n        \"NRLIB_PASS=nrpass\",\n        \"NRLIB_CACE=/data/ca.pem\",\n        \"AISRV_ENDP=https://DefaultAIServer:8080/nodes\",\n        \"AISRV_CACE=/data/ca.pem\"\n    ],\n    \"advanced\": {\n        \"volume\": {},\n        \"mountTarget\": \"/data\",\n        \"container\": {},\n        \"connect\": {},\n        \"start\": {\n            \"detachKeys\": \"\"\n        },\n        \"authentication\": {}\n    }\n}"
								}
							]
						}
					],
					"description": "Please find below here some generic yet relevant information about the different types of nodes and containerised software components that are created in this folder, or that are not actually created but might be of interest for other applications.\n\nThe requests in this folder are for creating the software components that we need for our first getting started example. All software components are deployed in Docker containers, so creating software components correspond to creating and running Docker containers that differentiate for the software artifacts that are preloaded into them at creation time. For each Docker container that is created, a Docker Volume is also created and mapped to an appropriate path in the Docker container. Once created, these software components will have to be configured, which is what will be done in the following folders of this getting started collection.\n\nA **Fence** is a logical boundary inside of which software components are created and executed. Technically speaking, fences are user-defined Docker networks. Software components that are in a fence cannot be accessed from the external, unless specifically configured. Software components that are in the same fence refer each other by container name. Software components that are in a fence do not have direct access to system resources. Fences are used for providing a logical organization to software deployed on a device, and for security reasons.\n\nA **Service Node** is a dockerized Node-RED application. As soon as created, the Service Node exposes a set of configuration APIs, by means of which it is possible to configure the task that the node must perform, as well as the task-specific configuration parameters, the possible MQTT clients for input/output, and more. Service Nodes are created through appropriate requests made to the Network Factory. Parameters can be set to retrieve customized Service Node implementations from the Web or from the local network, instead of using the default implementation.\n\nA **Crazy Node**, not used in this getting started collection, is a specialized Service Node that exposes APIs for operating arbitrary modifications on the implementation of the task that is executed by the node, at the maximum possible level of detail. It is the same as if a Java application would expose APIs for modifying any line of code in the source code of the Java application itself, in any possible way, with immediate effect. Uniquely, Node-RED supports this, and in Crazy Nodes, this feature is exploited.\n\nFor any request sent to a configuration API of a Service or a Crazy Node, there's an access control API that is called for verifying whether the request is authorized to alter that specific configuration. The URL of the ACL API is configured when the node is created, as an environment variable. Placeholder **Service Node ACL** APIs can be created for development and early testing purposes, through appropriate requests made to the Network Factory. This is what we do in this getting started collection. By setting appropriate parameters, it would be also possible to preload a customized Node-RED implementation of the access control logic, retireved from an archive available on the Web on in the local network.\n\nService and Crazy Nodes expose a dedicated configuration API that is used for specifying the task that the node must perform. The task is just identified by name. The API accesses the **Transformation Library**, retrieves the task implementation, and copies it, along with all dependencies, into the Service or Crazy Node. A Transformation Library is a dockerized Node-RED application which consists of a set of Node-RED subflows, each implementing a different task. Transformation Libraries are created through appropriate requests made to the Network Factory. By setting appropriate parameters, it is possible to create customized libraries. Otherwise, the default library, with a set of pre-implemented tasks, is created.\n\nService and Crazy Nodes exchange data each other by means of **MQTT brokers**. This makes the software solution maximally inspectable. Any MQTT broker can be used. If needed, instances of dockerized EMQX MQTT brokers and their associated **MQTT Broker ACL** APIs can be created through appropriate requests made to the Network Factory. This is what we do in this getting started collection.\n\n**How to develop and use customized nodes**\n\nIn the [GitHub repository](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service), source code archives are available for:\n\n- [Service Node](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/servicenode.tar)\n    \n- [Crazy Node](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/crazynode.tar)\n    \n- [Transformation Library](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/transformationlibrary.tar)\n    \n- [Service Node ACL](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/servicenodeacl.tar)\n    \n- [Broker ACL](https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/blob/main/brokeracl.tar)\n    \n- other\n    \n\nAll of them are Node-RED applications, which means that you can inspect their implementation by doing the following:\n\n- Run a Node-RED Docker Container with an associated [Docker Volume](https://docs.docker.com/storage/volumes/) mapped on the path /data\n    \n- [Restore](https://docs.docker.com/storage/volumes/#restore-volume-from-a-backup) the archive of interest to the Docker Volume associated to your newly created Docker Container\n    \n- Restart your Node-RED container, and connect to its Web interface.\n    \n\nYou are now free to inspect the default implementation of the application of your interest.\n\nFeel free to make all necessary modifications, then [backup](https://docs.docker.com/storage/volumes/#back-up-a-volume) the Docker Volume, and publish the resulting tar archive on the Internet or in your local network in a position that is reachable from the devices where you have a plan to use your customized implementation.\n\nAt this point, when you make requests to the Network Factory to create Service Nodes, Crazy Nodes, Transformation Libraries, any of the applications that we have mentioned above, just include a JSON body in your request, with the key **artifacts**, whose associated value must be a string, which is the URL where your customized implementation is published.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "netadmpass",
								"type": "string"
							},
							{
								"key": "username",
								"value": "netadm",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure InjectAwsrstbliSN",
					"item": [
						{
							"name": "16) PUT transformation: inject",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "inject"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the inject Node-RED subflow from the configured Transformation Library to the InjectAwsrstbliSN Service Node. The request is made to the Service Node itself."
							},
							"response": [
								{
									"name": "16) PUT transformation: inject",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "inject"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "6"
										},
										{
											"key": "ETag",
											"value": "W/\"6-lwECBRbcOnI7iRiNhW8GZq9ALhY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 11:53:03 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "inject"
								}
							]
						},
						{
							"name": "17) POST output node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/output",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"output"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through the next few requests. This way the output generated by the execution of the task loaded into this Service Node is published to the configured topic of the configured MQTT broker instance, and made available to other Service Nodes, which will listen to that same topic, and get input values from there, and publish their outputs to different configured topic(s) in the same or in other MQTT broker instances.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more output ports through which the generated outputs flow. These ports are not automatically connected to the MQTT client node that we are creating and that we will configure in the next few requests. For this reason, it is necessary to explicitly wire the output of the business logic, to the input of the MQTT client node, which is what is done in the POST wire request."
							},
							"response": [
								{
									"name": "17) POST output node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/output",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"output"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 11:58:16 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "18) PUT output broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "18) PUT output broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 11:59:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "19) PUT output port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "19) PUT output port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:01:06 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "20) PUT output topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "redshift/training"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"topic"
									]
								},
								"description": "This request configures the topic to which the output of the Service Node will be published, in the previously configured MQTT broker."
							},
							"response": [
								{
									"name": "20) PUT output topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "redshift/training"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-CjNgwz8cepwRgw2/zAmNPvwy0zA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:23:57 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "redshift/training"
								}
							]
						},
						{
							"name": "21) PUT output qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "21) PUT output qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:24:58 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "22) PUT output usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "22) PUT output usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:25:55 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "23) PUT output tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "23) PUT output tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:27:02 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "24) PUT output tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "24) PUT output tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:28:07 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "25) PUT output tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "25) PUT output tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:28:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "26) PUT output tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "26) PUT output tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:29:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "27) PUT output tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "27) PUT output tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:30:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "28) PUT output credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/out/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"out",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "28) PUT output credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/out/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"out",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:31:48 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "29) POST wire inject - out",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/wire/inject/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"wire",
										"inject",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "29) POST wire inject - out",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/wire/inject/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"wire",
												"inject",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:33:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "30) Start InjectAwsrstbliSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1884/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1884",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the awsrstbli Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "30) Start InjectAwsrstbliSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1884/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1884",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:34:48 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the HoleskysktSN Service Node is configured. The purpose of this Service Node is to receive values via API request and publish them to the redshift/training topic of the MQTT broker so that the AwsrstbliSN Service Node can subscribe to that topic, receive the values, and store them in a Redshift table.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure AwsrstbliSN",
					"item": [
						{
							"name": "31) PUT transformation: awsrstbli",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "awsrstbli"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the awsrstbli Node-RED subflow from the configured Transformation Library to this Service Node."
							},
							"response": [
								{
									"name": "31) PUT transformation: awsrstbli",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "awsrstbli"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "9"
										},
										{
											"key": "ETag",
											"value": "W/\"9-3thOZyQdfzxgOEtybpOBoEaL69U\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:42:25 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "awsrstbli"
								}
							]
						},
						{
							"name": "32) Config AwsrstbliSN region",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSRegion\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/config/region",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"config",
										"region"
									]
								},
								"description": "Through this request, we configure the AWS region where the AWS Redshift instance that we want to use for our demo is running.\n\nThe value is retrieved from the AWSRegion variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "32) Config AwsrstbliSN region",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/config/region",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"config",
												"region"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "9"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"9-IMdWuNdStYXbjaprmum3sPF5dps\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:53:42 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "eu-west-1"
								}
							]
						},
						{
							"name": "33) Config AwsrstbliSN access_key_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSAccessKeyId\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/config/access_key_id",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"config",
										"access_key_id"
									]
								},
								"description": "Through this request, we configure the AWS access key id that will be used to authenticate the requests made to AWS Redshift.\n\nThe value is retrieved from the AWSAccessKeyId variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "33) Config AwsrstbliSN access_key_id",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/config/access_key_id",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"config",
												"access_key_id"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "20"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"14-sTrxfXKD3tzvxbe+bUG+EO1vEtA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 12:58:15 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "YOUR_KEY_ID_APPEARS_HERE"
								}
							]
						},
						{
							"name": "34) Config AwsrstbliSN secret_access_key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSSecretAccessKey\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/config/secret_access_key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"config",
										"secret_access_key"
									]
								},
								"description": "Through this request, we configure the AWS secret access key that will be used to authenticate the requests made to AWS Redshift.\n\nThe value is retrieved from the AWSSecretAccessKey variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "34) Config AwsrstbliSN secret_access_key",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/config/secret_access_key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"config",
												"secret_access_key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "40"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"28-w5+xpFU7AT204IIL57GUZRGmFo8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:04:12 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "YOUR_SECRET_ACCESS_KEY_APPEARS_HERE"
								}
							]
						},
						{
							"name": "35) Config AwsrstbliSN workgroup_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSWorkgroupName\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/config/workgroup_name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"config",
										"workgroup_name"
									]
								},
								"description": "Through this request, we configure the name of the AWS workgroup that wraps the Redshift resources that we want to use for our demo.\n\nThe value is retrieved from the AWSWorkgroupName variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "35) Config AwsrstbliSN workgroup_name",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/config/workgroup_name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"config",
												"workgroup_name"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "15"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"f-u93Bofo5PBNhXne8SEzwrPLQLg4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:08:47 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "rmaas-workgroup"
								}
							]
						},
						{
							"name": "36) Config AwsrstbliSN database_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSDatabaseName\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/config/database_name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"config",
										"database_name"
									]
								},
								"description": "Through this request, we configure the name of the AWS Redshift database that we want to use for our demo.\n\nThe value is retrieved from the AWSDatabaseName variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "36) Config AwsrstbliSN database_name",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/config/database_name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"config",
												"database_name"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"3-NMb87KdeRW8l5+mVMeJCXGwd5EM\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:12:27 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "dev"
								}
							]
						},
						{
							"name": "37) Config AwsrstbliSN table_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSTableName\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/config/table_name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"config",
										"table_name"
									]
								},
								"description": "Through this request, we configure the name of the AWS Redshift table that we want to use for our demo.\n\nThe value is retrieved from the AWSTableName variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "37) Config AwsrstbliSN table_name",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/config/table_name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"config",
												"table_name"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"c-GYnPs0SBMUWr/TqWVixu2pcmH4E\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:15:09 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "my_data"
								}
							]
						},
						{
							"name": "38) Config AwsrstbliSN value_type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSValueType\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/config/value_type",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"config",
										"value_type"
									]
								},
								"description": "Through this request, we configure the type of the numeric values that we will use for our demo. Please refer to the following AWS documentation for the complete list and description of the numeric types that are supported in AWS Redshift:\n\n[https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html](https://docs.aws.amazon.com/redshift/latest/dg/r_Numeric_types201.html)\n\nThe value for this configuration is retrieved from the AWSValueType variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "38) Config AwsrstbliSN value_type",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/config/value_type",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"config",
												"value_type"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"3-RvirfAz/nffNEkhS4mAipr+J4xU\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:21:38 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "int"
								}
							]
						},
						{
							"name": "39) POST input node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "in"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/input",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"input"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through the next few requests in this collection. The client node is then connected to the input of the awsrstbli subflow in the Service Node, so that the subflow can receive the messages sent by InjectAwsrstbliSN to the MQTT broker, and add a new row to the Redshift table that is then used for training the clustering model.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more input ports through which the inputs flow. These ports are not automatically connected to the MQTT client node that we are creating with this request and that we will configure in the following few requests. For this reason, it is necessary to explicitly wire the input of the business logic, to the output of the MQTT client node, which is what is done through the POST wire request."
							},
							"response": [
								{
									"name": "39) POST input node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "in"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/input",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"input"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-rxDvIN2QYLvurQr7xVOBpmr0Qu8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:30:50 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "in"
								}
							]
						},
						{
							"name": "40) PUT input broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "40) PUT input broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:38:56 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "41) PUT input port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "41) PUT input port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:39:38 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "42) PUT input topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "redshift/training"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"topic"
									]
								},
								"description": "This request configures the topic from where the input of the Service Node will come. The topic is in the MQTT broker that has been configured in the previous requests."
							},
							"response": [
								{
									"name": "42) PUT input topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "redshift/training"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-CjNgwz8cepwRgw2/zAmNPvwy0zA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:40:07 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "redshift/training"
								}
							]
						},
						{
							"name": "43) PUT input qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "43) PUT input qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:41:10 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "44) PUT input usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "44) PUT input usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:42:12 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "45) PUT input tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "45) PUT input tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:42:47 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "46) PUT input tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "46) PUT input tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:43:18 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "47) PUT input tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "47) PUT input tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:43:52 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "48) PUT input tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "48) PUT input tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:44:21 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "49) PUT input tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "49) PUT input tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:45:04 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "50) PUT input credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/in/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"in",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "50) PUT input credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/in/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"in",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:45:40 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "51) POST wire in - awsrstbli",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "awsrstbli"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/wire/in/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"wire",
										"in",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "51) POST wire in - awsrstbli",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "awsrstbli"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/wire/in/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"wire",
												"in",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "9"
										},
										{
											"key": "ETag",
											"value": "W/\"9-3thOZyQdfzxgOEtybpOBoEaL69U\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:48:27 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "awsrstbli"
								}
							]
						},
						{
							"name": "52) Start AwsrstbliSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1885/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1885",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the awsrstbli Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "52) Start AwsrstbliSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1885/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1885",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 13:50:06 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the AwsrstbliSN Service Node is configured. The purpose of this service node is to listen to the MQTT topic redshift/training, and for each value that comes, add a new row to a configured Redshift table that will be then used for training the clustering model.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure AwsrskmcSN",
					"item": [
						{
							"name": "53) PUT transformation: awsrskmc",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "awsrskmc"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the awsrskmc Node-RED subflow from the configured Transformation Library to this Service Node."
							},
							"response": [
								{
									"name": "53) PUT transformation: awsrskmc",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "awsrskmc"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-jZC5RPDjBwbse6rMWralT8fPBlU\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 14:56:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "awsrskmc"
								}
							]
						},
						{
							"name": "54) POST config access_key_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSAccessKeyId\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/config/access_key_id",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"config",
										"access_key_id"
									]
								},
								"description": "Through this request, we configure the AWS access key id that will be used to authenticate the requests made to AWS Redshift.\n\nThe value is retrieved from the AWSAccessKeyId variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "54) POST config access_key_id",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/config/access_key_id",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"config",
												"access_key_id"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "20"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"14-sTrxfXKD3tzvxbe+bUG+EO1vEtA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 14:58:20 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "YOUR_ACCESS_KEY_ID_APPEARS_HERE"
								}
							]
						},
						{
							"name": "55) POST config secret_access_key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSSecretAccessKey\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/config/secret_access_key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"config",
										"secret_access_key"
									]
								},
								"description": "Through this request, we configure the AWS secret access key that will be used to authenticate the requests made to AWS Redshift.\n\nThe value is retrieved from the AWSSecretAccessKey variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "55) POST config secret_access_key",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/config/secret_access_key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"config",
												"secret_access_key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "40"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "ETag",
											"value": "W/\"28-w5+xpFU7AT204IIL57GUZRGmFo8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 15:00:39 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "YOUR_SECRET_ACCESS_KEY_APPEARS_HERE"
								}
							]
						},
						{
							"name": "56) Start AwsrskmcSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the awsrskmc Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "56) Start AwsrskmcSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 15:02:41 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the AwsrskmcSN Service Node is configured. After configuration, the service node will expose an API that can be used for creating a clustering (K-Means) model on AWS Redshift.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure InjectAwsrskmpSN",
					"item": [
						{
							"name": "57) PUT transformation: inject",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "inject"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the inject Node-RED subflow from the configured Transformation Library to the InjectAwsrskmpSN Service Node. The request is made to the Service Node itself."
							},
							"response": [
								{
									"name": "57) PUT transformation: inject",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "inject"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "6"
										},
										{
											"key": "ETag",
											"value": "W/\"6-lwECBRbcOnI7iRiNhW8GZq9ALhY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:32:48 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "inject"
								}
							]
						},
						{
							"name": "58) POST output node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/output",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"output"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through the next few requests. This way the output generated by the execution of the task loaded into this Service Node is published to the configured topic of the configured MQTT broker instance, and made available to other Service Nodes, which will listen to that same topic, and get input values from there, and publish their outputs to different configured topic(s) in the same or in other MQTT broker instances.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more output ports through which the generated outputs flow. These ports are not automatically connected to the MQTT client node that we are creating and that we will configure in the next few requests. For this reason, it is necessary to explicitly wire the output of the business logic, to the input of the MQTT client node, which is what is done in the POST wire request."
							},
							"response": [
								{
									"name": "58) POST output node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/output",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"output"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:34:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "59) PUT output broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "59) PUT output broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:46:57 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "60) PUT output port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "60) PUT output port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:47:23 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "61) PUT output topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "redshift/input"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"topic"
									]
								},
								"description": "This request configures the topic to which the output of the Service Node will be published, in the previously configured MQTT broker."
							},
							"response": [
								{
									"name": "61) PUT output topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "redshift/input"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "14"
										},
										{
											"key": "ETag",
											"value": "W/\"e-Pun0KL62rCvpEAxiXX8xwWOvuyg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:47:35 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "redshift/input"
								}
							]
						},
						{
							"name": "62) PUT output qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "62) PUT output qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:47:57 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "63) PUT output usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "63) PUT output usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:48:12 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "64) PUT output tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "64) PUT output tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:48:34 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "65) PUT output tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "65) PUT output tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:48:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "66) PUT output tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "66) PUT output tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:49:11 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "67) PUT output tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "67) PUT output tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:49:34 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "68) PUT output tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "68) PUT output tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:49:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "69) PUT output credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/out/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"out",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "69) PUT output credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/out/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"out",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:50:23 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "70) POST wire inject - out",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/wire/inject/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"wire",
										"inject",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "70) POST wire inject - out",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/wire/inject/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"wire",
												"inject",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:50:58 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "71) Start InjectAwsrskmpSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1887/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1887",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the inject Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "71) Start InjectAwsrskmpSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1887/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1887",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 17:52:00 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the InjectAwsrskmpSN Service Node is configured. The purpose of this Service Node is to receive values via API requests and publish them to the redshift/input topic of the MQTT broker so that the AwsrskmpSN Service Node can subscribe to that same topic and receive them in input and formulate predictions.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure AwsrskmpSN",
					"item": [
						{
							"name": "72) PUT transformation: awsrskmp",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "awsrskmp"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the awsrskmp Node-RED subflow from the configured Transformation Library to this Service Node."
							},
							"response": [
								{
									"name": "72) PUT transformation: awsrskmp",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "awsrskmp"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-NlgclOyIMMyf7jGi3S/DiH3u3FU\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:30:28 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "awsrskmp"
								}
							]
						},
						{
							"name": "73) Config AwsrskmpSN region",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSRegion\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/config/region",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"config",
										"region"
									]
								},
								"description": "Through this request, we configure the AWS region where the AWS Redshift instance that we want to use for our demo is running.\n\nThe value is retrieved from the AWSRegion variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "73) Config AwsrskmpSN region",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/config/region",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"config",
												"region"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "9"
										},
										{
											"key": "ETag",
											"value": "W/\"9-IMdWuNdStYXbjaprmum3sPF5dps\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:30:46 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "eu-west-1"
								}
							]
						},
						{
							"name": "74) Config AwsrskmpSN access_key_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSAccessKeyId\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/config/access_key_id",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"config",
										"access_key_id"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through requests from # 29 to # 39. The client node is then connected to the input of the holeskytbl subflow in the Service Node, so that the subflow can receive the messages/transactions sent by HoleskywrtSN to the MQTT broker, and display them on a table on the Web.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more input ports through which the inputs flow. These ports are not automatically connected to the MQTT client node that we are creating and configuring in requests from # 29 to # 39. For this reason, it is necessary to explicitly wire the input of the business logic, to the output of the MQTT client node, which is what is done through request # 40."
							},
							"response": [
								{
									"name": "74) Config AwsrskmpSN access_key_id",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/config/access_key_id",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"config",
												"access_key_id"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "20"
										},
										{
											"key": "ETag",
											"value": "W/\"14-sTrxfXKD3tzvxbe+bUG+EO1vEtA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:30:59 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "YOUR_ACCESS_KEY_ID_APPEARS_HERE"
								}
							]
						},
						{
							"name": "75) Config AwsrskmpSN secret_access_key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSSecretAccessKey\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/config/secret_access_key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"config",
										"secret_access_key"
									]
								},
								"description": "Through this request, we configure the AWS secret access key that will be used to authenticate the requests made to AWS Redshift.\n\nThe value is retrieved from the AWSSecretAccessKey variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "75) Config AwsrskmpSN secret_access_key",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/config/secret_access_key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"config",
												"secret_access_key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "40"
										},
										{
											"key": "ETag",
											"value": "W/\"28-w5+xpFU7AT204IIL57GUZRGmFo8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:31:33 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "YOUR_SECRET_ACCESS_KEY_APPEARS_HERE"
								}
							]
						},
						{
							"name": "76) Config AwsrskmpSN workgroup_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSWorkgroupName\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/config/workgroup_name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"config",
										"workgroup_name"
									]
								},
								"description": "Through this request, we configure the name of the AWS workgroup that wraps the Redshift resources that we want to use for our demo.\n\nThe value is retrieved from the AWSWorkgroupName variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "76) Config AwsrskmpSN workgroup_name",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/config/workgroup_name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"config",
												"workgroup_name"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "15"
										},
										{
											"key": "ETag",
											"value": "W/\"f-u93Bofo5PBNhXne8SEzwrPLQLg4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:32:14 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "rmaas-workgroup"
								}
							]
						},
						{
							"name": "77) Config AwsrskmpSN database_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSDatabaseName\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/config/database_name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"config",
										"database_name"
									]
								},
								"description": "Through this request, we configure the name of the AWS Redshift database that we want to use for our demo.\n\nThe value is retrieved from the AWSDatabaseName variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "77) Config AwsrskmpSN database_name",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/config/database_name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"config",
												"database_name"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-NMb87KdeRW8l5+mVMeJCXGwd5EM\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:32:33 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "dev"
								}
							]
						},
						{
							"name": "78) Config AwsrskmpSN function_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSFunctionName\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/config/function_name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"config",
										"function_name"
									]
								},
								"description": "Through this request, we configure the name of the function that we will use in Redshift queries to get the prediction.\n\nThe value is retrieved from the AWSFunctionName variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "78) Config AwsrskmpSN function_name",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/config/function_name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"config",
												"function_name"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "7"
										},
										{
											"key": "ETag",
											"value": "W/\"7-UibIdYNqN+6vzw6w7fRW4ooqSiQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:32:47 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "predict"
								}
							]
						},
						{
							"name": "79) Config AwsrskmpSN table_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(pm.collectionVariables.get(\"AWSTableName\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/config/table_name",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"config",
										"table_name"
									]
								},
								"description": "Through this request, we configure the name of the AWS Redshift table that we want to use for our demo.\n\nThe value is retrieved from the AWSTableName variable, which is defined at the level of the Postman collection. Unfortunately, Postman is not capable to resolve collection variables in request bodies when they are plain text; it only works when you submit JSON bodies. Then, we have been forced to set the value through a pre-request script defined on this request itself."
							},
							"response": [
								{
									"name": "79) Config AwsrskmpSN table_name",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/config/table_name",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"config",
												"table_name"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "7"
										},
										{
											"key": "ETag",
											"value": "W/\"7-qwwVtgKf3/zhazk/LSfKg5p2JJ4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:33:04 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "my_data"
								}
							]
						},
						{
							"name": "80) POST input node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "in"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/input",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"input"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through the next few requests in this collection. The client node is then connected to the input of the awsrskmp subflow in the Service Node, so that the subflow can receive the messages sent by InjectAwsrskmpSN to the MQTT broker, and generate a prediction about which is the cluster to which the incoming value belongs.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more input ports through which the inputs flow. These ports are not automatically connected to the MQTT client node that we are creating with this request and that we will configure in the following few requests. For this reason, it is necessary to explicitly wire the input of the business logic, to the output of the MQTT client node, which is what is done through the POST wire request."
							},
							"response": [
								{
									"name": "80) POST input node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "in"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/input",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"input"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-rxDvIN2QYLvurQr7xVOBpmr0Qu8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:33:21 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "in"
								}
							]
						},
						{
							"name": "81) PUT input broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "81) PUT input broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:33:34 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "82) PUT input port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "82) PUT input port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:33:44 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "83) PUT input topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "redshift/input"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"topic"
									]
								},
								"description": "This request configures the topic from where the input of the Service Node will come. The topic is in the MQTT broker that has been configured in the previous requests."
							},
							"response": [
								{
									"name": "83) PUT input topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "redshift/input"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "14"
										},
										{
											"key": "ETag",
											"value": "W/\"e-Pun0KL62rCvpEAxiXX8xwWOvuyg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:33:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "redshift/input"
								}
							]
						},
						{
							"name": "84) PUT input qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "84) PUT input qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:34:09 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "85) PUT input usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "85) PUT input usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:34:19 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "86) PUT input tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "86) PUT input tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:34:30 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "87) PUT input tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "87) PUT input tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:34:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "88) PUT input tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "88) PUT input tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:34:56 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "89) PUT input tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "89) PUT input tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:35:07 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "90) PUT input tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "90) PUT input tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:35:17 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "91) PUT input credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/in/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"in",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "91) PUT input credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/in/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"in",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:35:28 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "92) POST wire in - awsrskmp",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "awsrskmp"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/wire/in/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"wire",
										"in",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "92) POST wire in - awsrskmp",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "awsrskmp"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/wire/in/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"wire",
												"in",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-NlgclOyIMMyf7jGi3S/DiH3u3FU\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:35:41 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "awsrskmp"
								}
							]
						},
						{
							"name": "93) POST output node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/output",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"output"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through the next few requests. This way the output generated by the execution of the task loaded into this Service Node is published to the configured topic of the configured MQTT broker instance, and made available to other Service Nodes, which will listen to that same topic, and get input values from there, and publish their outputs to different configured topic(s) in the same or in other MQTT broker instances.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more output ports through which the generated outputs flow. These ports are not automatically connected to the MQTT client node that we are creating and that we will configure in the next few requests. For this reason, it is necessary to explicitly wire the output of the business logic, to the input of the MQTT client node, which is what is done in the POST wire request."
							},
							"response": [
								{
									"name": "93) POST output node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/output",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"output"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:35:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "94) PUT output broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "94) PUT output broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:36:02 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "95) PUT output port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "95) PUT output port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:36:14 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "96) PUT output topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "redshift/prediction"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"topic"
									]
								},
								"description": "This request configures the topic to which the output of the Service Node will be published, in the previously configured MQTT broker."
							},
							"response": [
								{
									"name": "96) PUT output topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "redshift/prediction"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "19"
										},
										{
											"key": "ETag",
											"value": "W/\"13-c8LfWL848rMLp1FOMKeoYbUrGu4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:36:27 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "redshift/prediction"
								}
							]
						},
						{
							"name": "97) PUT output qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "97) PUT output qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:36:37 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "98) PUT output usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "98) PUT output usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:36:49 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "99) PUT output tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "99) PUT output tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:37:00 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "100) PUT output tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "100) PUT output tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:37:14 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "101) PUT output tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "101) PUT output tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:37:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "102) PUT output tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "102) PUT output tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:37:40 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "103) PUT output tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "103) PUT output tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:37:55 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "104) PUT output credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/out/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"out",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "104) PUT output credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/out/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"out",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:38:10 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "105) POST wire awsrskmp - out",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/wire/awsrskmp/3",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"wire",
										"awsrskmp",
										"3"
									]
								}
							},
							"response": [
								{
									"name": "105) POST wire awsrskmp - out",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/wire/awsrskmp/3",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"wire",
												"awsrskmp",
												"3"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:41:56 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "106) Start AwsrskmpSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1888/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1888",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the awsrskmp Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "106) Start AwsrskmpSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1888/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1888",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 18:42:23 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the AwsrskmpSN Service Node is configured. The Service Node listens to the redshift/input topic of the MQTT broker and outputs a prediction about the cluster to which the received value belongs.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure CreateHtmlSN",
					"item": [
						{
							"name": "107) PUT transformation: expr",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "expr"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the expr Node-RED subflow from the configured Transformation Library to this Service Node."
							},
							"response": [
								{
									"name": "107) PUT transformation: expr",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "expr"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-D9GGAgTWzuQzkpcoF+Znku5wK4k\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:10:42 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "expr"
								}
							]
						},
						{
							"name": "108) Config CreateHtmlSN expression",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"<h1>\" & \r\n    \"Value: \" & $lookup($eval(payload),\"input\") & \r\n\"</h1>\" & \r\n\"<table>\" &\r\n    \"<thead>\" &\r\n        \"<tr>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Cluster ID</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Cluster Size</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Min (train)</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Max (train)</th>\" &\r\n        \"</tr>\" &\r\n    \"</thead>\" &\r\n    \"<tbody>\" &\r\n        $join($map($lookup($lookup($eval(payload),\"result\"),\"Records\"), function($v, $i, $a) { (\r\n            $style := \"style=\\\"background:\" & ($lookup($v[4],\"booleanValue\")?\"lightgray\":\"white\") & \"; border:thin solid black;\\\"\";\r\n            \"<tr>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[0],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[1],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[2],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[3],\"longValue\") & \"</td>\" &\r\n            \"</tr>\"\r\n        )})) &\r\n    \"</tbody>\" &\r\n\"</table>\""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/expr/jsonata",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"expr",
										"jsonata"
									]
								},
								"description": "Through this request, we configure the JSONata expression that the Service Node computes every time that it receives a value in input from the broker. The result of the expression is then published on a different topic of the same broker."
							},
							"response": [
								{
									"name": "108) Config CreateHtmlSN expression",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"<h1>\" & \r\n    \"Value: \" & $lookup($eval(payload),\"input\") & \r\n\"</h1>\" & \r\n\"<table>\" &\r\n    \"<thead>\" &\r\n        \"<tr>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Cluster ID</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Cluster Size</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Min (train)</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Max (train)</th>\" &\r\n        \"</tr>\" &\r\n    \"</thead>\" &\r\n    \"<tbody>\" &\r\n        $join($map($lookup($lookup($eval(payload),\"result\"),\"Records\"), function($v, $i, $a) { (\r\n            $style := \"style=\\\"background:\" & ($lookup($v[4],\"booleanValue\")?\"lightgray\":\"white\") & \"; border:thin solid black;\\\"\";\r\n            \"<tr>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[0],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[1],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[2],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[3],\"longValue\") & \"</td>\" &\r\n            \"</tr>\"\r\n        )})) &\r\n    \"</tbody>\" &\r\n\"</table>\""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/expr/jsonata",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"expr",
												"jsonata"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1075"
										},
										{
											"key": "ETag",
											"value": "W/\"433-1bT7BsX36J3KfaFL85coaQeVwsM\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:10:56 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "\"<h1>\" & \r\n    \"Value: \" & $lookup($eval(payload),\"input\") & \r\n\"</h1>\" & \r\n\"<table>\" &\r\n    \"<thead>\" &\r\n        \"<tr>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Cluster ID</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Cluster Size</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Min (train)</th>\" &\r\n            \"<th style=\\\"text-align:left;\\\">Max (train)</th>\" &\r\n        \"</tr>\" &\r\n    \"</thead>\" &\r\n    \"<tbody>\" &\r\n        $join($map($lookup($lookup($eval(payload),\"result\"),\"Records\"), function($v, $i, $a) { (\r\n            $style := \"style=\\\"background:\" & ($lookup($v[4],\"booleanValue\")?\"lightgray\":\"white\") & \"; border:thin solid black;\\\"\";\r\n            \"<tr>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[0],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[1],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[2],\"longValue\") & \"</td>\" &\r\n                \"<td \" & $style & \">\" & $lookup($v[3],\"longValue\") & \"</td>\" &\r\n            \"</tr>\"\r\n        )})) &\r\n    \"</tbody>\" &\r\n\"</table>\""
								}
							]
						},
						{
							"name": "109) POST input node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "in"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/input",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"input"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through the next few requests in this collection. The client node is then connected to the input of the expr subflow in the Service Node, so that the subflow can receive the messages sent by AwsrskmpSN to the MQTT broker, and compose an HTML markup that reports the value, the full list of the clusters, and highlighted the cluster to which the value belongs.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more input ports through which the inputs flow. These ports are not automatically connected to the MQTT client node that we are creating with this request and that we will configure in the following few requests. For this reason, it is necessary to explicitly wire the input of the business logic, to the output of the MQTT client node, which is what is done through the POST wire request."
							},
							"response": [
								{
									"name": "109) POST input node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "in"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/input",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"input"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-rxDvIN2QYLvurQr7xVOBpmr0Qu8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:11:09 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "in"
								}
							]
						},
						{
							"name": "110) PUT input broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "110) PUT input broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:11:21 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "111) PUT input port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "111) PUT input port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:11:32 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "112) PUT input topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "redshift/prediction"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"topic"
									]
								},
								"description": "This request configures the topic from where the input of the Service Node will come. The topic is in the MQTT broker that has been configured in the previous requests."
							},
							"response": [
								{
									"name": "112) PUT input topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "redshift/prediction"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "19"
										},
										{
											"key": "ETag",
											"value": "W/\"13-c8LfWL848rMLp1FOMKeoYbUrGu4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:11:45 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "redshift/prediction"
								}
							]
						},
						{
							"name": "113) PUT input qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "113) PUT input qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:11:57 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "114) PUT input usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "114) PUT input usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:12:14 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "115) PUT input tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "115) PUT input tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:12:25 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "116) PUT input tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "116) PUT input tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:12:36 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "117) PUT input tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "117) PUT input tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:12:47 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "118) PUT input tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "118) PUT input tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:12:58 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "119) PUT input tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "119) PUT input tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:13:09 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "120) PUT input credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/in/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"in",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "120) PUT input credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/in/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"in",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:13:20 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "121) POST wire in - expr",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "expr"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/wire/in/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"wire",
										"in",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "121) POST wire in - expr",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "expr"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/wire/in/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"wire",
												"in",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-D9GGAgTWzuQzkpcoF+Znku5wK4k\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:13:35 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "expr"
								}
							]
						},
						{
							"name": "122) POST output node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/output",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"output"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through the next few requests. This way the output generated by the execution of the task loaded into this Service Node is published to the configured topic of the configured MQTT broker instance, and made available to other Service Nodes, which will listen to that same topic, and get input values from there, and publish their outputs to different configured topic(s) in the same or in other MQTT broker instances.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more output ports through which the generated outputs flow. These ports are not automatically connected to the MQTT client node that we are creating and that we will configure in the next few requests. For this reason, it is necessary to explicitly wire the output of the business logic, to the input of the MQTT client node, which is what is done in the POST wire request."
							},
							"response": [
								{
									"name": "122) POST output node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/output",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"output"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:13:47 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "123) PUT output broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "123) PUT output broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:13:58 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "124) PUT output port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker where the output of the Service Node will be published."
							},
							"response": [
								{
									"name": "124) PUT output port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:14:08 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "125) PUT output topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "redshift/html"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"topic"
									]
								},
								"description": "This request configures the topic to which the output of the Service Node will be published, in the previously configured MQTT broker."
							},
							"response": [
								{
									"name": "125) PUT output topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "redshift/html"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "13"
										},
										{
											"key": "ETag",
											"value": "W/\"d-MYwKQ2QEtfcKMQWzgLueFg8iQOY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:14:19 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "redshift/html"
								}
							]
						},
						{
							"name": "126) PUT output qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "126) PUT output qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:14:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "127) PUT output usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "127) PUT output usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:14:41 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "128) PUT output tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "128) PUT output tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:14:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "129) PUT output tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "129) PUT output tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:15:07 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "130) PUT output tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "130) PUT output tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:15:18 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "131) PUT output tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "131) PUT output tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:15:34 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "132) PUT output tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "132) PUT output tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:15:46 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "133) PUT output credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/out/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"out",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "133) PUT output credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/out/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"out",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:15:58 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "134) POST wire expr - out",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "out"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/wire/expr/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"wire",
										"expr",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "134) POST wire expr - out",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "out"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/wire/expr/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"wire",
												"expr",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-9IAN+NG8YfyVIgZFk4zWVTKmQGc\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:16:09 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "out"
								}
							]
						},
						{
							"name": "135) Start CreateHtmlSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1889/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1889",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the expr Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "135) Start CreateHtmlSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1889/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1889",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:16:22 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the CreateHTMLSN Service Node is configured. After configuration, the node receives the prediction from the topic redshift/prediction of the MQTT broker and produces an HTML markup that contains the same amount of information of the message that comes from redshift/prediction (value of interest, full list of clusters with key information for each cluster, and indication of the cluster to which the value of interest belongs).",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure DisplayHtmlSN",
					"item": [
						{
							"name": "136) POST module node-red-dashboard",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/module/node-red-dashboard",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"module",
										"node-red-dashboard"
									]
								},
								"description": "Through this request, we add to the DisplayHtmlSN Service Node a specific Node-RED module that is necessary for the Service Node to be capable to expose data on a Web page. The task implementation that we will load into this Service Node in request # 137, relies on this module.\n\nRemarkably, this request is not made to the Network Factory; instead, it is made directly to the Service Node where the Node-RED module is required. The same happens for all requests contained in this folder, thanks to the fact that since creation time, Service Nodes expose a number of APIs that can be called for their configuration, without passing through the Network Factory."
							},
							"response": [
								{
									"name": "136) POST module node-red-dashboard",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/module/node-red-dashboard",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"module",
												"node-red-dashboard"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3697"
										},
										{
											"key": "ETag",
											"value": "W/\"e71-mTENO1NFZZRfAwG4JEPq0P1yXTQ\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:34:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"node-red-dashboard\",\n    \"version\": \"3.6.5\",\n    \"local\": true,\n    \"user\": true,\n    \"path\": \"/data/node_modules/node-red-dashboard\",\n    \"nodes\": [\n        {\n            \"id\": \"node-red-dashboard/ui_base\",\n            \"name\": \"ui_base\",\n            \"types\": [\n                \"ui_base\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_button\",\n            \"name\": \"ui_button\",\n            \"types\": [\n                \"ui_button\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_dropdown\",\n            \"name\": \"ui_dropdown\",\n            \"types\": [\n                \"ui_dropdown\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_switch\",\n            \"name\": \"ui_switch\",\n            \"types\": [\n                \"ui_switch\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_slider\",\n            \"name\": \"ui_slider\",\n            \"types\": [\n                \"ui_slider\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_numeric\",\n            \"name\": \"ui_numeric\",\n            \"types\": [\n                \"ui_numeric\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_text_input\",\n            \"name\": \"ui_text_input\",\n            \"types\": [\n                \"ui_text_input\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_date_picker\",\n            \"name\": \"ui_date_picker\",\n            \"types\": [\n                \"ui_date_picker\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_colour_picker\",\n            \"name\": \"ui_colour_picker\",\n            \"types\": [\n                \"ui_colour_picker\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_form\",\n            \"name\": \"ui_form\",\n            \"types\": [\n                \"ui_form\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_text\",\n            \"name\": \"ui_text\",\n            \"types\": [\n                \"ui_text\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_gauge\",\n            \"name\": \"ui_gauge\",\n            \"types\": [\n                \"ui_gauge\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_chart\",\n            \"name\": \"ui_chart\",\n            \"types\": [\n                \"ui_chart\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_audio\",\n            \"name\": \"ui_audio\",\n            \"types\": [\n                \"ui_audio\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_toast\",\n            \"name\": \"ui_toast\",\n            \"types\": [\n                \"ui_toast\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_ui_control\",\n            \"name\": \"ui_ui_control\",\n            \"types\": [\n                \"ui_ui_control\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_template\",\n            \"name\": \"ui_template\",\n            \"types\": [\n                \"ui_template\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_link\",\n            \"name\": \"ui_link\",\n            \"types\": [\n                \"ui_link\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_tab\",\n            \"name\": \"ui_tab\",\n            \"types\": [\n                \"ui_tab\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_group\",\n            \"name\": \"ui_group\",\n            \"types\": [\n                \"ui_group\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        },\n        {\n            \"id\": \"node-red-dashboard/ui_spacer\",\n            \"name\": \"ui_spacer\",\n            \"types\": [\n                \"ui_spacer\"\n            ],\n            \"enabled\": true,\n            \"local\": true,\n            \"user\": false,\n            \"module\": \"node-red-dashboard\",\n            \"version\": \"3.6.5\"\n        }\n    ],\n    \"plugins\": []\n}"
								}
							]
						},
						{
							"name": "137) PUT transformation: html",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "html"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/transformation",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"transformation"
									]
								},
								"description": "Through this request, we copy the implementation of the html Node-RED subflow from the configured Transformation Library to this Service Node."
							},
							"response": [
								{
									"name": "137) PUT transformation: html",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "html"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/transformation",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"transformation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-lQo5tsKTS7cvLe92xx6I6cA1OF8\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:34:46 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "html"
								}
							]
						},
						{
							"name": "138) Config DisplayHtmlSN title",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "Clustering with AWS Redshift"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/html/title",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"html",
										"title"
									]
								},
								"description": "Through this request, we set the title of the Web page."
							},
							"response": [
								{
									"name": "138) Config DisplayHtmlSN title",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "Clustering with AWS Redshift"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/html/title",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"html",
												"title"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "28"
										},
										{
											"key": "ETag",
											"value": "W/\"1c-xJwpnyCxt1d96nltra1/z0af00k\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:35:00 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Clustering with AWS Redshift"
								}
							]
						},
						{
							"name": "139) Config DisplayHtmlSN width",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "20"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/html/width",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"html",
										"width"
									]
								},
								"description": "Through this request, we set the width of the portion of the Web page inside which the markup will be rendered. A particular unit of measure that is specific to Node-RED Dashboard is used."
							},
							"response": [
								{
									"name": "139) Config DisplayHtmlSN width",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "20"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/html/width",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"html",
												"width"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-kQMq17vLbPcodejoIH3PuoAXP3w\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:35:19 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "20"
								}
							]
						},
						{
							"name": "140) Config DisplayHtmlSN height",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "10"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/html/height",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"html",
										"height"
									]
								},
								"description": "Through this request, we set the height of the portion of the Web page inside which the markup will be rendered. A particular unit of measure that is specific to Node-RED Dashboard is used."
							},
							"response": [
								{
									"name": "140) Config DisplayHtmlSN height",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "10"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/html/height",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"html",
												"height"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-sdV4ERHYT3s/5FoIUuWXWM16h+U\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:35:30 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "10"
								}
							]
						},
						{
							"name": "141) POST input node",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "in"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/input",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"input"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through the next few requests in this collection. The client node is then connected to the input of the html subflow in the Service Node, so that the subflow can receive the messages sent by CreateHtmlSN to the MQTT broker, and display the markup on a Web page.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more input ports through which the inputs flow. These ports are not automatically connected to the MQTT client node that we are creating with this request and that we will configure in the following few requests. For this reason, it is necessary to explicitly wire the input of the business logic, to the output of the MQTT client node, which is what is done through the POST wire request."
							},
							"response": [
								{
									"name": "141) POST input node",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "in"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/input",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"input"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-rxDvIN2QYLvurQr7xVOBpmr0Qu8\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:35:47 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "in"
								}
							]
						},
						{
							"name": "142) PUT input broker",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/broker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"broker"
									]
								},
								"description": "This request configures the hostname of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "142) PUT input broker",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/broker",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"broker"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:36:02 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "143) PUT input port",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "8883"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/port",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"port"
									]
								},
								"description": "This request configures the port of the MQTT broker from where the input of the Service Node will come."
							},
							"response": [
								{
									"name": "143) PUT input port",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "8883"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/port",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"port"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-Mey9LjyGOKN+VmbjvjzvJ7sK3N4\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:36:13 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "8883"
								}
							]
						},
						{
							"name": "144) PUT input topic",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "redshift/html"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/topic",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"topic"
									]
								},
								"description": "This request configures the topic from where the input of the Service Node will come. The topic is in the MQTT broker that has been configured in the previous requests."
							},
							"response": [
								{
									"name": "144) PUT input topic",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "redshift/html"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/topic",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"topic"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "13"
										},
										{
											"key": "ETag",
											"value": "W/\"d-MYwKQ2QEtfcKMQWzgLueFg8iQOY\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:36:38 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "redshift/html"
								}
							]
						},
						{
							"name": "145) PUT input qos",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "0"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/qos",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"qos"
									]
								}
							},
							"response": [
								{
									"name": "145) PUT input qos",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "0"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/qos",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"qos"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1"
										},
										{
											"key": "ETag",
											"value": "W/\"1-tlifxqsNyCzxIJnRwtQKuZToQQw\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:36:49 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "0"
								}
							]
						},
						{
							"name": "146) PUT input usetls",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "yes"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/usetls",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"usetls"
									]
								}
							},
							"response": [
								{
									"name": "146) PUT input usetls",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "yes"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/usetls",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"usetls"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "ETag",
											"value": "W/\"3-+zYPnAmsjF7bLxi+XeToDqTEMNA\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:37:00 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "yes"
								}
							]
						},
						{
							"name": "147) PUT input tls key",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.key"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/key",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"key"
									]
								}
							},
							"response": [
								{
									"name": "147) PUT input tls key",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.key"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/key",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-PsIW3/cioYBYtV/Eh+b3ozbpGO8\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:37:12 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.key"
								}
							]
						},
						{
							"name": "148) PUT input tls cert",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/mycert.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/cert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"cert"
									]
								}
							},
							"response": [
								{
									"name": "148) PUT input tls cert",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/mycert.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/cert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"cert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "ETag",
											"value": "W/\"10-NtXLPFxJNTPJMm9Efrd65bn1PZs\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:37:25 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/mycert.pem"
								}
							]
						},
						{
							"name": "149) PUT input tls ca",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/data/ca.pem"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/ca",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"ca"
									]
								}
							},
							"response": [
								{
									"name": "149) PUT input tls ca",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "/data/ca.pem"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/ca",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"ca"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "12"
										},
										{
											"key": "ETag",
											"value": "W/\"c-J9H/gysmtibY9TNpxKj2vZUESVQ\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:37:39 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "/data/ca.pem"
								}
							]
						},
						{
							"name": "150) PUT input tls verify",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "no"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/verifyservercert",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"verifyservercert"
									]
								}
							},
							"response": [
								{
									"name": "150) PUT input tls verify",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "no"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/verifyservercert",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"verifyservercert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "2"
										},
										{
											"key": "ETag",
											"value": "W/\"2-/RKGNTVwxXA3mbp2mZMjt8dEewY\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:37:50 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "no"
								}
							]
						},
						{
							"name": "151) PUT input tls server",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "DefaultMqttBroker"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/servername",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"servername"
									]
								}
							},
							"response": [
								{
									"name": "151) PUT input tls server",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "DefaultMqttBroker"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/servername",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"servername"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "17"
										},
										{
											"key": "ETag",
											"value": "W/\"11-fE7o34VXl1QOxG4Az935CEXEUUg\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:38:04 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "DefaultMqttBroker"
								}
							]
						},
						{
							"name": "152) PUT input credentials",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/in/credentials",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"in",
										"credentials"
									]
								}
							},
							"response": [
								{
									"name": "152) PUT input credentials",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/in/credentials",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"in",
												"credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "35"
										},
										{
											"key": "ETag",
											"value": "W/\"23-tL/g/Nd+j7Ij5RjcW0XK/W9Ym2Y\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:38:15 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": \"admin\",\n    \"password\": \"admin\"\n}"
								}
							]
						},
						{
							"name": "153) POST wire in - html",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "html"
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/wire/in/0",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"wire",
										"in",
										"0"
									]
								}
							},
							"response": [
								{
									"name": "153) POST wire in - html",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "html"
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/wire/in/0",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"wire",
												"in",
												"0"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4"
										},
										{
											"key": "ETag",
											"value": "W/\"4-lQo5tsKTS7cvLe92xx6I6cA1OF8\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:38:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "html"
								}
							]
						},
						{
							"name": "154) Start DisplayHtmlSN",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:1890/node/start",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1890",
									"path": [
										"node",
										"start"
									]
								},
								"description": "Through this request, the execution of the html Node-RED subflow that has been uploaded to the Service Node from the Transformation Library, starts into the Service Node. Up to this point, the logic was in place, but disabled. This is because before that the execution starts, it is important that all the configurations have been performed. This is why the subflows that are uploaded to the Service Nodes from the Transformation Library are initially disabled in the Service Node, and an API request must be made to make them active and running."
							},
							"response": [
								{
									"name": "154) Start DisplayHtmlSN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{DockerHost}}:1890/node/start",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1890",
											"path": [
												"node",
												"start"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Length",
											"value": "8"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "ETag",
											"value": "W/\"8-z7P/w+uhUAftOESUAJ0Fp7tJpR0\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 19:38:38 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "Started."
								}
							]
						}
					],
					"description": "Through the requests contained in this folder, the DisplayHtmlSN Service Node is configured. The node receives the HTML markup from the redshift/html topic of the MQTT broker, and renders it on a Web page, rebuilding the page from scratch every time that a new markup is received.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "admin",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "The requests in this folder create the Network Factory, which is the Node-RED application that exposes the APIs for creating all the other components of the distributed system.\n\nThen, the Network Factory is used for creating and organising all the nodes that are required for this example system, which include seven Service Nodes, alongside with Node-RED applications for access control, Node-RED applications that contain the implementation of all the different modules to be loaded to the Service Nodes, and the MQTT broker. All these software components live in Docker Containers and are run by the Docker Engine that is in operation in the Docker Host that is configured through the dedicated Postman variable that you can find at the collection level.\n\nIn end, there are the seven configuration folders, one for each service node, in which requests are made directly to the newly creates service nodes for loading the software modules of interest into them, and for connecting the input and/or output to specific topics of the MQTT brokers, and for starting the execution of the software that has been loaded into the service node. This is what makes the Service Nodes different from one another. Before of the configuration, as soon as created by the Network Factory, all Service Nodes look exactly the same.\n\nBelow here is the list of the Service Nodes that this collection creates, configures, and operates, for the purposes of this demo:\n\n- InjectAwsrstbliSN, which exposes an API that publishes the request payload, which is expected to be a numeric plain text, to the redshift/training topic of the MQTT broker;\n    \n- AwsrstbliSN, which listens to the redshift/training topic of the MQTT broker and stores the incoming values to a configured table in Redshift;\n    \n- AwsrskmcSN, which exposes an API that creates a clustering (K-Means) model in Redshift using data stored in a configured table in Redshift;\n    \n- InjectAwsrskmpSN, which exposes an API that publishes the request payload, which is expected to be a numeric plain text, to the redshift/input topic of the MQTT broker;\n    \n- AwsrskmpSN, which listens to the redshift/input topic of the MQTT broker and for each incoming message uses the model previously created in Redshift to determine in which cluster the incoming value falls, and publishes the response to the redshift/prediction topic of the MQTT broker;\n    \n- CreateHtmlSN, which listens to the redshift/prediction topic of the MQTT broker and composes an HTML markup that reports the input value, and a table with the full list of the clusters generated by the K-Means model, with highlighted the one to which the input value belongs, and then publishes that markup to the redshift/html topic of the MQTT broker;\n    \n- DisplayHtmlSN, which listens to the redshift/html topic of the MQTT broker and renders the incoming markup on a Web page."
		},
		{
			"name": "Use",
			"item": [
				{
					"name": "Training (RUN THIS  FOLDER - 600 ITERATIONS)",
					"item": [
						{
							"name": "155) Insert random value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.request.body.update(\"\" + _.random(0,1000));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://localhost:1884/inject",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "1884",
									"path": [
										"inject"
									]
								}
							},
							"response": [
								{
									"name": "155) Insert random value",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "https://localhost:1884/inject",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1884",
											"path": [
												"inject"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "etag",
											"value": "W/\"1c0-Cj7Ck9bj5OTnJ4yrL0MwQzDOdXU\""
										},
										{
											"key": "date",
											"value": "Mon, 03 Feb 2025 20:31:33 GMT"
										},
										{
											"key": "connection",
											"value": "keep-alive"
										},
										{
											"key": "keep-alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "601"
								}
							]
						}
					],
					"description": "Here is where we populate the table in the Redshift database that will be used later for training the model. There is a minimum of 500 data points that must be there for the model to be created. Then, you are advised to run this folder, configuring at least 600 iterations. It is a good idea to configure the run in a way such that it consumes as less memory as possible, and that the overhead is kept at its minimum."
				},
				{
					"name": "Create Model",
					"item": [
						{
							"name": "156) Create Model",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"region\": \"{{AWSRegion}}\", \r\n    \"workgroup_name\": \"{{AWSWorkgroupName}}\", \r\n    \"database_name\": \"{{AWSDatabaseName}}\",\r\n    \"table_name\": \"{{AWSTableName}}\",\r\n    \"model_name\": \"{{AWSModelName}}\",\r\n    \"function_name\": \"{{AWSFunctionName}}\", \r\n    \"k\": \"{{kParameter}}\",\r\n    \"s3_bucket\": \"{{S3BucketName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{DockerHost}}:1886/model",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "1886",
									"path": [
										"model"
									]
								},
								"description": "Through this request, we create into this Service Node, a new Node-RED node, which is a MQTT client node. The MQTT client node is then configured through requests from # 44 to # 54. This way the output generated by the execution of the task loaded into this Service Node (the hash of the new transaction sent to the blockchain, in this case) is published to the configured topic of the configured MQTT broker instance, and made available to other Service Nodes, which will listen to that same topic, and get input values from there, and publish their outputs to different configured topic(s) in the same or in other MQTT broker instances.\n\nRemarkably, inside of Service Nodes, the task implementation is wrapped into a block, and this block has one or more output ports through which the generated outputs flow. These ports are not automatically connected to the MQTT client node that we are creating and configuring in requests from # 44 to # 54. For this reason, it is necessary to explicitly wire the output of the business logic, to the input of the MQTT client node, which is what is done through request # 55."
							},
							"response": [
								{
									"name": "156) Create Model",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"region\": \"{{AWSRegion}}\", \r\n    \"workgroup_name\": \"{{AWSWorkgroupName}}\", \r\n    \"database_name\": \"{{AWSDatabaseName}}\",\r\n    \"table_name\": \"{{AWSTableName}}\",\r\n    \"model_name\": \"{{AWSModelName}}\",\r\n    \"function_name\": \"{{AWSFunctionName}}\", \r\n    \"k\": \"{{kParameter}}\",\r\n    \"s3_bucket\": \"{{S3BucketName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{DockerHost}}:1886/model",
											"protocol": "https",
											"host": [
												"{{DockerHost}}"
											],
											"port": "1886",
											"path": [
												"model"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "275"
										},
										{
											"key": "ETag",
											"value": "W/\"113-DKXJOtVXtv4yGiOQ2uLw+GGRMEE\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Feb 2025 20:21:55 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"$metadata\": {\n        \"httpStatusCode\": 200,\n        \"requestId\": \"1d96e447-42ac-4550-a169-bfb1d7723427\",\n        \"attempts\": 1,\n        \"totalRetryDelay\": 0\n    },\n    \"CreatedAt\": \"2025-02-03T20:21:54.755Z\",\n    \"Database\": \"dev\",\n    \"DbUser\": \"IAM:rmaas\",\n    \"Id\": \"1d96e447-42ac-4550-a169-bfb1d7723427\",\n    \"WorkgroupName\": \"rmaas-workgroup\"\n}"
								}
							]
						}
					],
					"description": "With the request in this folder, we create the model.\n\n**Remark**: you need to create the S3 bucket manually, before that you send the request."
				},
				{
					"name": "Obtain Prediction",
					"item": [
						{
							"name": "157) Obtain prediction for value 100",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "100",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://localhost:1887/inject",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "1887",
									"path": [
										"inject"
									]
								}
							},
							"response": [
								{
									"name": "157) Obtain prediction for value 100",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "100",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "https://localhost:1887/inject",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1887",
											"path": [
												"inject"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "etag",
											"value": "W/\"1c0-Uo20Y0ZX8xIRkW1Yo1QBRB507P8\""
										},
										{
											"key": "date",
											"value": "Mon, 03 Feb 2025 20:29:42 GMT"
										},
										{
											"key": "connection",
											"value": "keep-alive"
										},
										{
											"key": "keep-alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "100"
								}
							]
						},
						{
							"name": "158) Obtain prediction for value 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "500",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://localhost:1887/inject",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "1887",
									"path": [
										"inject"
									]
								}
							},
							"response": [
								{
									"name": "158) Obtain prediction for value 500",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "500",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "https://localhost:1887/inject",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1887",
											"path": [
												"inject"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "etag",
											"value": "W/\"1c0-F+flRqObTc+rkwvN+Z/8+L5bm9U\""
										},
										{
											"key": "date",
											"value": "Mon, 03 Feb 2025 20:31:46 GMT"
										},
										{
											"key": "connection",
											"value": "keep-alive"
										},
										{
											"key": "keep-alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "500"
								}
							]
						},
						{
							"name": "159) Obtain prediction for value 900",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "900",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://localhost:1887/inject",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "1887",
									"path": [
										"inject"
									]
								}
							},
							"response": [
								{
									"name": "159) Obtain prediction for value 900",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "900",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "https://localhost:1887/inject",
											"protocol": "https",
											"host": [
												"localhost"
											],
											"port": "1887",
											"path": [
												"inject"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "access-control-allow-origin",
											"value": "*"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "text/plain; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "3"
										},
										{
											"key": "etag",
											"value": "W/\"1c0-+MLp0P0IjYR8DCBvd85fh9e90aA\""
										},
										{
											"key": "date",
											"value": "Mon, 03 Feb 2025 20:32:21 GMT"
										},
										{
											"key": "connection",
											"value": "keep-alive"
										},
										{
											"key": "keep-alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "900"
								}
							]
						}
					],
					"description": "In this folder, we send different values as we monitor the Web page\n\nhttps://localhost:1890/ui\n\nwhere we will see these values appear, alongside with the full list of the clusters that are present in the model that we have just created, with highlighted the cluster to which the value belongs."
				}
			],
			"description": "In this folder, there are the requests that we make to put at use the distributed system that we have built so far. We will store some random values in a Redshift table, then we will create a clustering model based on those values, and we will send further values in input for the system to process, which in this case means determining to which cluster the value belongs, and rendering the value together with the list of clusters (with the one of interest highlighted) in a Web page. If everything is left as default, the address of the Web page is:\n\n[https://localhost:1890/ui](https://localhost:1890/ui)"
		},
		{
			"name": "Dismiss",
			"item": [
				{
					"name": "160) Switch off InjectAwsrstbliSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/InjectAwsrstbliSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"InjectAwsrstbliSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "160) Switch off InjectAwsrstbliSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/InjectAwsrstbliSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"InjectAwsrstbliSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:09:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "161) Remove InjectAwsrstbliSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/InjectAwsrstbliSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"InjectAwsrstbliSN"
							]
						}
					},
					"response": [
						{
							"name": "161) Remove InjectAwsrstbliSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/InjectAwsrstbliSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"InjectAwsrstbliSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:12:37 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "162) Switch off AwsrstbliSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/AwsrstbliSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"AwsrstbliSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "162) Switch off AwsrstbliSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/AwsrstbliSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"AwsrstbliSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:12:53 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "163) Remove AwsrstbliSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/AwsrstbliSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"AwsrstbliSN"
							]
						}
					},
					"response": [
						{
							"name": "163) Remove AwsrstbliSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/AwsrstbliSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"AwsrstbliSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:13:06 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "164) Switch off AwsrskmcSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/AwsrskmcSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"AwsrskmcSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "164) Switch off AwsrskmcSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/AwsrskmcSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"AwsrskmcSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:13:18 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "165) Remove AwsrskmcSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/AwsrskmcSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"AwsrskmcSN"
							]
						}
					},
					"response": [
						{
							"name": "165) Remove AwsrskmcSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/AwsrskmcSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"AwsrskmcSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:13:32 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "166) Switch off InjectAwsrskmpSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/InjectAwsrskmpSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"InjectAwsrskmpSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "166) Switch off InjectAwsrskmpSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/InjectAwsrskmpSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"InjectAwsrskmpSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:13:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "167) Remove InjectAwsrskmpSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/InjectAwsrskmpSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"InjectAwsrskmpSN"
							]
						}
					},
					"response": [
						{
							"name": "167) Remove InjectAwsrskmpSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/InjectAwsrskmpSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"InjectAwsrskmpSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:14:09 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "168) Switch off AwsrskmpSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/AwsrskmpSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"AwsrskmpSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "168) Switch off AwsrskmpSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/AwsrskmpSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"AwsrskmpSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:14:22 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "169) Remove AwsrskmpSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/AwsrskmpSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"AwsrskmpSN"
							]
						}
					},
					"response": [
						{
							"name": "169) Remove AwsrskmpSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/AwsrskmpSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"AwsrskmpSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:14:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "170) Switch off CreateHtmlSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/CreateHtmlSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"CreateHtmlSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "170) Switch off CreateHtmlSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/CreateHtmlSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"CreateHtmlSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:14:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "171) Remove CreateHtmlSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/CreateHtmlSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"CreateHtmlSN"
							]
						}
					},
					"response": [
						{
							"name": "171) Remove CreateHtmlSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/CreateHtmlSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"CreateHtmlSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:15:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "172) Switch off DisplayHtmlSN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/DisplayHtmlSN/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"DisplayHtmlSN",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "172) Switch off DisplayHtmlSN",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/DisplayHtmlSN/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"DisplayHtmlSN",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:15:27 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "173) Remove DisplayHtmlSN",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/DisplayHtmlSN",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"DisplayHtmlSN"
							]
						}
					},
					"response": [
						{
							"name": "173) Remove DisplayHtmlSN",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/DisplayHtmlSN",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"DisplayHtmlSN"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:15:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "174) Switch off ServiceNodeDefaultACL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/ServiceNodeDefaultACL/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"ServiceNodeDefaultACL",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "174) Switch off ServiceNodeDefaultACL",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/ServiceNodeDefaultACL/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"ServiceNodeDefaultACL",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:15:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "175) Remove ServiceNodeDefaultACL",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/ServiceNodeDefaultACL",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"ServiceNodeDefaultACL"
							]
						}
					},
					"response": [
						{
							"name": "175) Remove ServiceNodeDefaultACL",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/ServiceNodeDefaultACL",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"ServiceNodeDefaultACL"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:16:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "176) Switch off MqttBrokerDefaultACL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/MqttBrokerDefaultACL/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"MqttBrokerDefaultACL",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "176) Switch off MqttBrokerDefaultACL",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/MqttBrokerDefaultACL/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"MqttBrokerDefaultACL",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:16:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "177) Remove MqttBrokerDefaultACL",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/MqttBrokerDefaultACL",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"MqttBrokerDefaultACL"
							]
						}
					},
					"response": [
						{
							"name": "177) Remove MqttBrokerDefaultACL",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/MqttBrokerDefaultACL",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"MqttBrokerDefaultACL"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:16:40 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "178) Switch off DefaultMqttBroker",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/DefaultMqttBroker/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"DefaultMqttBroker",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "178) Switch off DefaultMqttBroker",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/DefaultMqttBroker/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"DefaultMqttBroker",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:17:00 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "179) Remove DefaultMqttBroker",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/DefaultMqttBroker",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"DefaultMqttBroker"
							]
						}
					},
					"response": [
						{
							"name": "179) Remove DefaultMqttBroker",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/DefaultMqttBroker",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"DefaultMqttBroker"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:17:30 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "180) Switch off DefaultTransformationLibrary",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/DefaultTransformationLibrary/off",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"DefaultTransformationLibrary",
								"off"
							]
						}
					},
					"response": [
						{
							"name": "180) Switch off DefaultTransformationLibrary",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/DefaultTransformationLibrary/off",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"DefaultTransformationLibrary",
										"off"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "13"
								},
								{
									"key": "ETag",
									"value": "W/\"d-P0cFt2W9RppwWRkU5EEpbjh/XPE\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:17:53 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Switched off."
						}
					]
				},
				{
					"name": "181) Remove DefaultTransformationLibrary",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/Redshift/DefaultTransformationLibrary",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"Redshift",
								"DefaultTransformationLibrary"
							]
						}
					},
					"response": [
						{
							"name": "181) Remove DefaultTransformationLibrary",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/Redshift/DefaultTransformationLibrary",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"Redshift",
										"DefaultTransformationLibrary"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "8"
								},
								{
									"key": "ETag",
									"value": "W/\"8-SOp4Dzw8Mp2Ja1M3vP6EDDrCtJI\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:19:19 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "Deleted."
						}
					]
				},
				{
					"name": "182) Remove fence",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{DockerHost}}:585/fence/Redshift",
							"protocol": "https",
							"host": [
								"{{DockerHost}}"
							],
							"port": "585",
							"path": [
								"fence",
								"Redshift"
							]
						}
					},
					"response": [
						{
							"name": "182) Remove fence",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{DockerHost}}:585/fence/Redshift",
									"protocol": "https",
									"host": [
										"{{DockerHost}}"
									],
									"port": "585",
									"path": [
										"fence",
										"Redshift"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "ETag",
									"value": "W/\"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk\""
								},
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 21:19:32 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "Through the requests in this folder, we clean up our Docker Host removing everything that we have created for the purposes of this demo."
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "DockerHost",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "AWSRegion",
			"value": "YOUR_REGION_GOES_HERE",
			"type": "string"
		},
		{
			"key": "AWSAccessKeyId",
			"value": "YOUR_ACCESS_KEY_ID_GOES_HERE",
			"type": "string"
		},
		{
			"key": "AWSSecretAccessKey",
			"value": "YOUR_SECRET_ACCESS_KEY_GOES_HERE",
			"type": "string"
		},
		{
			"key": "AWSWorkgroupName",
			"value": "rmaas-workgroup",
			"type": "string"
		},
		{
			"key": "AWSDatabaseName",
			"value": "dev",
			"type": "string"
		},
		{
			"key": "AWSTableName",
			"value": "my_data",
			"type": "string"
		},
		{
			"key": "AWSValueType",
			"value": "int",
			"type": "string"
		},
		{
			"key": "AWSModelName",
			"value": "my_model",
			"type": "default"
		},
		{
			"key": "AWSFunctionName",
			"value": "predict",
			"type": "string"
		},
		{
			"key": "S3BucketName",
			"value": "my-model-artifacts",
			"type": "default"
		},
		{
			"key": "kParameter",
			"value": "3",
			"type": "default"
		}
	]
}