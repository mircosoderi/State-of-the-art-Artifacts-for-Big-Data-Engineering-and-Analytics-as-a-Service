{
	"info": {
		"_postman_id": "f9c0bd83-f4ae-4354-b1c1-0657b739a7f9",
		"name": "DummyCellPhonesFactory",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16531967"
	},
	"item": [
		{
			"name": "-- Network Factory --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "postman-echo.com/get",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Factory already exists?",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.code == 200) postman.setNextRequest(\"Factory is running?\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAdmHost}}:{{DockerAdmPort}}/containers/{{FactoryName}}/json",
					"host": [
						"{{DockerAdmHost}}"
					],
					"port": "{{DockerAdmPort}}",
					"path": [
						"containers",
						"{{FactoryName}}",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pull Network Factory Image",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{DockerAdmHost}}:{{DockerAdmPort}}/images/create?fromImage=msoderi/network-factory&tag={{FactoryVersion}}",
					"host": [
						"{{DockerAdmHost}}"
					],
					"port": "{{DockerAdmPort}}",
					"path": [
						"images",
						"create"
					],
					"query": [
						{
							"key": "fromImage",
							"value": "msoderi/network-factory"
						},
						{
							"key": "tag",
							"value": "{{FactoryVersion}}"
						}
					]
				},
				"description": "Thanks to this request, the msoderi/network-factory Docker Image becomes available in your local Docker installation, or in the specified DockerHost, if different from the default (localhost). The image is retrieved from Docker Hub."
			},
			"response": []
		},
		{
			"name": "Create Network Factory",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n     \"Image\": \"msoderi/network-factory:{{FactoryVersion}}\",\r\n     \"HostConfig\": {\r\n         \"PortBindings\": {\r\n             \"1880/tcp\": [\r\n                 {\r\n                     \"HostPort\": \"{{FactoryPort}}\"\r\n                 }\r\n             ]\r\n         }\r\n     },\r\n     \"ExposedPorts\": {\r\n         \"1880/tcp\": {}\r\n     }\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAdmHost}}:{{DockerAdmPort}}/containers/create?name={{FactoryName}}",
					"host": [
						"{{DockerAdmHost}}"
					],
					"port": "{{DockerAdmPort}}",
					"path": [
						"containers",
						"create"
					],
					"query": [
						{
							"key": "name",
							"value": "{{FactoryName}}"
						}
					]
				},
				"description": "Thanks to this request, the msoderi/network-factory Docker Image becomes available in your local Docker installation, or in the specified DockerHost, if different from the default (localhost). The image is retrieved from Docker Hub."
			},
			"response": []
		},
		{
			"name": "Factory is running?",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(JSON.parse(responseBody).State.Running) postman.setNextRequest(\"-- Fence --\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAdmHost}}:{{DockerAdmPort}}/containers/{{FactoryName}}/json",
					"host": [
						"{{DockerAdmHost}}"
					],
					"port": "{{DockerAdmPort}}",
					"path": [
						"containers",
						"{{FactoryName}}",
						"json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Network Factory",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 10000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{DockerAdmHost}}:{{DockerAdmPort}}/containers/{{FactoryName}}/start",
					"host": [
						"{{DockerAdmHost}}"
					],
					"port": "{{DockerAdmPort}}",
					"path": [
						"containers",
						"{{FactoryName}}",
						"start"
					]
				},
				"description": "Through this request, you start the Docker container you created through request 0.2, and have a Network Factory up and running in your target device, which is by default your local device."
			},
			"response": []
		},
		{
			"name": "-- Fence --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fence already exists?",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.code == 200) postman.setNextRequest(\"-- Utility --\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/fence/{{Fence}}",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"fence",
						"{{Fence}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Newman Fence",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/fence/{{Fence}}",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"fence",
						"{{Fence}}"
					]
				},
				"description": "This request creates a fence (user-defined Docker network) named GettingStarted on the targeted Docker Host."
			},
			"response": []
		},
		{
			"name": "-- Utility --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Database",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Database\",\r\n    \"image\": \"mariadb:latest\",\r\n    \"artifacts\": \"https://github.com/mircosoderi/State-of-the-art-Artifacts-for-Big-Data-Engineering-and-Analytics-as-a-Service/raw/main/dcpf-docker-entrypoint-initdb.d.tar\",\r\n    \"env\": [ \"MYSQL_ROOT_PASSWORD=root\" ],\r\n    \"advanced\": {\r\n        \"mountTarget\": \"/var/lib/mysql\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/app",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"app"
					]
				},
				"description": "This request demonstrates that arbitrary software can be created through the Network Factory. In this case, we create a dockerized MariaDB RDBMS instance, we retrieve from the Web and preload the SQL script that will be executed automatically at server startup and that will create the RDB schema that is needed for the purposes of these getting started examples, and we set the root password as an environment variable, according to the official mariadb Docker Image specification."
			},
			"response": []
		},
		{
			"name": "Create MQTT Broker",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Access Control Node",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/servicenodeacl",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"servicenodeacl"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Transformation Library",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/transformationlibrary",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"transformationlibrary"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Prometheus DB",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"prometheus\",\r\n    \"image\": \"prom/prometheus:v2.45.0\",\r\n    \"ports\": {\r\n        \"9090/tcp\": \"9090\"\r\n    },\r\n    \"advanced\": {\r\n        \"mountTarget\": \"/prometheus\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/app",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"app"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Jaeger All-in-one Instance",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"jaeger\",\r\n    \"image\": \"jaegertracing/all-in-one:1.47\",\r\n    \"env\": [\r\n        \"COLLECTOR_ZIPKIN_HOST_PORT=:9411\", \r\n        \"COLLECTOR_OTLP_ENABLED=true\",\r\n        \"METRICS_STORAGE_TYPE=prometheus\",\r\n        \"PROMETHEUS_SERVER_URL={{PrometeusEndp}}\",\r\n        \"PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true\"\r\n        ],\r\n    \"ports\": {\r\n        \"6831/udp\": \"6831\",\r\n        \"6832/udp\": \"6832\",\r\n        \"5778/tcp\": \"5778\",\r\n        \"16685/tcp\": \"16685\",\r\n        \"16686/tcp\": \"16686\",\r\n        \"4317/tcp\": \"4317\",\r\n        \"4318/tcp\": \"4318\",\r\n        \"14250/tcp\": \"14250\",\r\n        \"14268/tcp\": \"14268\",\r\n        \"14269/tcp\": \"14269\",\r\n        \"9411/tcp\": \"9411\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/app",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"app"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Apache Flume Instance",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/log",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"log"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-Magazine --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Magazine",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Magazine\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{MagazinePort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-Magazine\",\r\n        \"OTEL_PREFIX=DCPF-Magazine-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Magazine Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Magazine"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Magazine",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "[TEST] add item",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/magazine/circuitboard/number/CCB00001/to/3",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"magazine",
						"circuitboard",
						"number",
						"CCB00001",
						"to",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "[TEST] add item Copy",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/magazine/smalltopcover/number/STC00001/to/2",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"magazine",
						"smalltopcover",
						"number",
						"STC00001",
						"to",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "[TEST] add item Copy 2",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/magazine/smallbottomcover/number/SBC00001/to/1",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"magazine",
						"smallbottomcover",
						"number",
						"SBC00001",
						"to",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "[TEST] remove item",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{MagazinePort}}/magazine/cell/9",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{MagazinePort}}",
					"path": [
						"magazine",
						"cell",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-ConveyorBelt --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-ConveyorBelt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-ConveyorBelt\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{ConveyorBeltPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-ConveyorBelt\",\r\n        \"OTEL_PREFIX=DCPF-ConveyorBelt-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install ConveyorBelt Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_ConveyorBelt"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add input for conveyor belt speed",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "in"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/input",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"input"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set input broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/#"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/in/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"in",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect input to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_ConveyorBelt"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/wire/in/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"wire",
						"in",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start ConveyorBelt",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{ConveyorBeltPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ConveyorBeltPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-Loader --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Loader",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Loader\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{LoaderPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-Loader\",\r\n        \"OTEL_PREFIX=DCPF-Loader-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Loader Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Loader"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add input for items to be loaded",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "in"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/input",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"input"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set input broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/load_from_cell"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/in/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"in",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect input to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Loader"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/wire/in/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"wire",
						"in",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request belt stop",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_start_stop"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/out/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"out",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/wire/DCPF_Loader/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_Loader",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Loader",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{LoaderPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{LoaderPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-Orders --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Orders\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{OrdersPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-Orders\",\r\n        \"OTEL_PREFIX=DCPF-Orders-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{OrdersPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{OrdersPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{OrdersPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{OrdersPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{OrdersPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{OrdersPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Orders Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Orders"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{OrdersPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{OrdersPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{OrdersPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{OrdersPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Orders",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{OrdersPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{OrdersPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "[TEST] Insert Order",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"client\": \"CLIENTXXX04\",\r\n    \"itemtype\": \"smallcellphone\",\r\n    \"quantity\": 1\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{OrdersPort}}/order",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{OrdersPort}}",
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "[TEST] Cancel Order",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{OrdersPort}}/order/number/2",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{OrdersPort}}",
					"path": [
						"order",
						"number",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-ExecSystem --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-ExecSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-ExecSystem\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{ExecSystemPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-ExecSystem\",\r\n        \"OTEL_PREFIX=DCPF-ExecSystem-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Execution System Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_ExecSystem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to control belt speed",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out0"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_speed"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out0/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out0",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out0"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/wire/DCPF_ExecSystem/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_ExecSystem",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request loading from magazine",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out1"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/load_from_cell"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out1/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out1",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out1"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/wire/DCPF_ExecSystem/1",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_ExecSystem",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request belt start and stop",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_start_stop"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/out2/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"out2",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/wire/DCPF_ExecSystem/2",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_ExecSystem",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add input to get beld speed recommendations",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "in"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/input",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"input"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set input broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/recommended_belt_speed"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set input broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/in/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"in",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect input to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_ExecSystem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/wire/in/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"wire",
						"in",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start ExecSystem",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Test] Start production",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"conveyor_belt_speed\": 1\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{ExecSystemPort}}/production/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{ExecSystemPort}}",
					"path": [
						"production",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-Rotator --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Rotator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Rotator\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{RotatorPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-Rotator\",\r\n        \"OTEL_PREFIX=DCPF-Rotator-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Rotator Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Rotator"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request belt start and stop",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_start_stop"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/out/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"out",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/wire/DCPF_Rotator/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_Rotator",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Rotator",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{RotatorPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{RotatorPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-Drill --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Drill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Drill\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{DrillPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-Drill\",\r\n        \"OTEL_PREFIX=DCPF-Drill-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Drill Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Drill"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request belt start and stop",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_start_stop"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/out/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"out",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/wire/DCPF_Drill/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_Drill",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Drill",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{DrillPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{DrillPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-IndustrialArm --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-IndustrialArm",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-IndustrialArm\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{IndustrialArmPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-IndustrialArm\",\r\n        \"OTEL_PREFIX=DCPF-IndustrialArm-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Industrial Arm Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_IndustrialArm"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request belt start and stop",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_start_stop"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/out/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"out",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/wire/DCPF_IndustrialArm/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_IndustrialArm",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start IndustrialArm",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{IndustrialArmPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{IndustrialArmPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-Camera --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Camera",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Camera\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{CameraPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-Camera\",\r\n        \"OTEL_PREFIX=DCPF-Camera-\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Camera Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Camera"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request belt start and stop",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_start_stop"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/out/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"out",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/wire/DCPF_Camera/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_Camera",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Camera",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{CameraPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CameraPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-Assembler --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Assembler",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Assembler\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{AssemblerPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-Assembler\",\r\n        \"OTEL_PREFIX=DCPF-Assembler\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Assembler Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Assembler"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request belt start and stop",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_start_stop"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/out/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"out",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/wire/DCPF_Assembler/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_Assembler",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Assembler",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{AssemblerPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{AssemblerPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-Press --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-Press",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-Press\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{PressPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-Press\",\r\n        \"OTEL_PREFIX=DCPF-Press\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install dashboard",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/module/node-red-dashboard",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"module",
						"node-red-dashboard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install mysql client",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/module/node-red-contrib-stackhero-mysql",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-stackhero-mysql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install tableify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/module/node-red-contrib-tableify",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"module",
						"node-red-contrib-tableify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install Press Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_Press"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to request belt start and stop",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/conveyor_belt_start_stop"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/out/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"out",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/wire/DCPF_Press/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_Press",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start Press",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "-- DCPF-CustomIIoT --",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/echo",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"echo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DCPF-CustomIIoT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){}, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"DCPF-CustomIIoT\",\r\n    \"ports\": {\r\n        \"1880/tcp\": \"{{CustomIIoTPort}}\"\r\n    },\r\n    \"env\": [\r\n        \"OTEL_EXPORTER={{OtelExporter}}\",\r\n        \"OTEL_SERVICE=DCPF-CustomIIoT\",\r\n        \"OTEL_PREFIX=DCPF-CustomIIoT\",\r\n        \"FLUME_LEVEL=debug\"\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{FactoryPort}}/{{Fence}}/crazynode",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{FactoryPort}}",
					"path": [
						"{{Fence}}",
						"crazynode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Install CustomIIoT Logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DCPF_CustomIIoT"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/transformation",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"transformation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Provide database credentials Copy",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"root\",\r\n    \"password\": \"root\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{PressPort}}/dcpfdatabase/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{PressPort}}",
					"path": [
						"dcpfdatabase",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add output to provide recommended belt speed",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/output",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"output"
					]
				},
				"description": "Similarly to what we discussed earlier about the output, also for getting the input from a MQTT broker it is necessary to create inside of the Service Node a new Node-RED MQTT client node, which is different from the one used for publishing the output, and then it is necessary to configure the newly created MQTT client node, and it is necessary to wire the newly created node to the input port of the node that wraps the task implementation. This is what is done through requests from # 48 to # 60.\n\nMQTT client nodes both for reading input and for publishing outputs are natively available in the default palette of dockerized Node-RED. For this reason, it is not necessary to install any additional module; instead, it is enough to add instances of these nodes to the implementation of the application, and then configure each of them appropriately."
			},
			"response": []
		},
		{
			"name": "Set output broker client host",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/broker",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"broker"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client port",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "8883"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/port",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"port"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client topic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "dcpf/recommended_belt_speed"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/topic",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"topic"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client qos Copy",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "2"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/qos",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client usetls",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "yes"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/usetls",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"usetls"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls key",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.key"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/key",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"key"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls cert",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/mycert.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/cert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"cert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls ca",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/data/ca.pem"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/ca",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"ca"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls verify",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "no"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/verifyservercert",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"verifyservercert"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client tls server",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "DefaultMqttBroker"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/servername",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"servername"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set output broker client credentials",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": \"admin\",\r\n    \"password\": \"admin\"\r\n}"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/out/credentials",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"out",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect output to application logic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "out"
				},
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/wire/DCPF_CustomIIoT/0",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"wire",
						"DCPF_CustomIIoT",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start CustomIIoT",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{DockerAppHost}}:{{CustomIIoTPort}}/node/start",
					"host": [
						"{{DockerAppHost}}"
					],
					"port": "{{CustomIIoTPort}}",
					"path": [
						"node",
						"start"
					]
				}
			},
			"response": []
		}
	]
}